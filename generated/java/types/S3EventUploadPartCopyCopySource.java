/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = S3EventUploadPartCopyCopySource.Builder.class
)
public final class S3EventUploadPartCopyCopySource {
  private final String bucket;

  private final String objectKey;

  private final Optional<String> versionId;

  private final Map<String, Object> additionalProperties;

  private S3EventUploadPartCopyCopySource(String bucket, String objectKey,
      Optional<String> versionId, Map<String, Object> additionalProperties) {
    this.bucket = bucket;
    this.objectKey = objectKey;
    this.versionId = versionId;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("bucket")
  public String getBucket() {
    return bucket;
  }

  @JsonProperty("objectKey")
  public String getObjectKey() {
    return objectKey;
  }

  @JsonProperty("versionId")
  public Optional<String> getVersionId() {
    return versionId;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof S3EventUploadPartCopyCopySource && equalTo((S3EventUploadPartCopyCopySource) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(S3EventUploadPartCopyCopySource other) {
    return bucket.equals(other.bucket) && objectKey.equals(other.objectKey) && versionId.equals(other.versionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.bucket, this.objectKey, this.versionId);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static BucketStage builder() {
    return new Builder();
  }

  public interface BucketStage {
    ObjectKeyStage bucket(String bucket);

    Builder from(S3EventUploadPartCopyCopySource other);
  }

  public interface ObjectKeyStage {
    _FinalStage objectKey(String objectKey);
  }

  public interface _FinalStage {
    S3EventUploadPartCopyCopySource build();

    _FinalStage versionId(Optional<String> versionId);

    _FinalStage versionId(String versionId);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements BucketStage, ObjectKeyStage, _FinalStage {
    private String bucket;

    private String objectKey;

    private Optional<String> versionId = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(S3EventUploadPartCopyCopySource other) {
      bucket(other.getBucket());
      objectKey(other.getObjectKey());
      versionId(other.getVersionId());
      return this;
    }

    @Override
    @JsonSetter("bucket")
    public ObjectKeyStage bucket(String bucket) {
      this.bucket = bucket;
      return this;
    }

    @Override
    @JsonSetter("objectKey")
    public _FinalStage objectKey(String objectKey) {
      this.objectKey = objectKey;
      return this;
    }

    @Override
    public _FinalStage versionId(String versionId) {
      this.versionId = Optional.of(versionId);
      return this;
    }

    @Override
    @JsonSetter(
        value = "versionId",
        nulls = Nulls.SKIP
    )
    public _FinalStage versionId(Optional<String> versionId) {
      this.versionId = versionId;
      return this;
    }

    @Override
    public S3EventUploadPartCopyCopySource build() {
      return new S3EventUploadPartCopyCopySource(bucket, objectKey, versionId, additionalProperties);
    }
  }
}
