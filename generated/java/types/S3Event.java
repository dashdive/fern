/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class S3Event {
  private final Value value;

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  private S3Event(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static S3Event listBuckets(S3EventListBuckets value) {
    return new S3Event(new ListBucketsValue(value));
  }

  public static S3Event deleteBucket(S3EventDeleteBucket value) {
    return new S3Event(new DeleteBucketValue(value));
  }

  public static S3Event headBucket(S3EventHeadBucket value) {
    return new S3Event(new HeadBucketValue(value));
  }

  public static S3Event createBucket(S3EventCreateBucket value) {
    return new S3Event(new CreateBucketValue(value));
  }

  public static S3Event getBucketAcl(S3EventGetBucketAcl value) {
    return new S3Event(new GetBucketAclValue(value));
  }

  public static S3Event getBucketCors(S3EventGetBucketCors value) {
    return new S3Event(new GetBucketCorsValue(value));
  }

  public static S3Event getBucketEncryption(S3EventGetBucketEncryption value) {
    return new S3Event(new GetBucketEncryptionValue(value));
  }

  public static S3Event getBucketLocation(S3EventGetBucketLocation value) {
    return new S3Event(new GetBucketLocationValue(value));
  }

  public static S3Event getBucketVersioning(S3EventGetBucketVersioning value) {
    return new S3Event(new GetBucketVersioningValue(value));
  }

  public static S3Event putBucketAcl(S3EventPutBucketAcl value) {
    return new S3Event(new PutBucketAclValue(value));
  }

  public static S3Event putBucketCors(S3EventPutBucketCors value) {
    return new S3Event(new PutBucketCorsValue(value));
  }

  public static S3Event putBucketEncryption(S3EventPutBucketEncryption value) {
    return new S3Event(new PutBucketEncryptionValue(value));
  }

  public static S3Event deleteBucketCors(S3EventDeleteBucketCors value) {
    return new S3Event(new DeleteBucketCorsValue(value));
  }

  public static S3Event deleteBucketEncryption(S3EventDeleteBucketEncryption value) {
    return new S3Event(new DeleteBucketEncryptionValue(value));
  }

  public static S3Event getObjectLockConfiguration(S3EventGetObjectLockConfiguration value) {
    return new S3Event(new GetObjectLockConfigurationValue(value));
  }

  public static S3Event putObjectLockConfiguration(S3EventPutObjectLockConfiguration value) {
    return new S3Event(new PutObjectLockConfigurationValue(value));
  }

  public static S3Event listObjectsV2(S3EventListObjectsV2 value) {
    return new S3Event(new ListObjectsV2Value(value));
  }

  public static S3Event headObject(S3EventHeadObject value) {
    return new S3Event(new HeadObjectValue(value));
  }

  public static S3Event listObjectVersions(S3EventListObjectVersions value) {
    return new S3Event(new ListObjectVersionsValue(value));
  }

  public static S3Event getObjectAcl(S3EventGetObjectAcl value) {
    return new S3Event(new GetObjectAclValue(value));
  }

  public static S3Event putObjectAcl(S3EventPutObjectAcl value) {
    return new S3Event(new PutObjectAclValue(value));
  }

  public static S3Event getObjectRetention(S3EventGetObjectRetention value) {
    return new S3Event(new GetObjectRetentionValue(value));
  }

  public static S3Event putObjectRetention(S3EventPutObjectRetention value) {
    return new S3Event(new PutObjectRetentionValue(value));
  }

  public static S3Event getObjectLegalHold(S3EventGetObjectLegalHold value) {
    return new S3Event(new GetObjectLegalHoldValue(value));
  }

  public static S3Event putObjectLegalHold(S3EventPutObjectLegalHold value) {
    return new S3Event(new PutObjectLegalHoldValue(value));
  }

  public static S3Event getObject(S3EventGetObject value) {
    return new S3Event(new GetObjectValue(value));
  }

  public static S3Event putObject(S3EventPutObject value) {
    return new S3Event(new PutObjectValue(value));
  }

  public static S3Event postObject(S3EventPostObject value) {
    return new S3Event(new PostObjectValue(value));
  }

  public static S3Event copyObject(S3EventCopyObject value) {
    return new S3Event(new CopyObjectValue(value));
  }

  public static S3Event deleteObject(S3EventDeleteObject value) {
    return new S3Event(new DeleteObjectValue(value));
  }

  public static S3Event deleteObjects(S3EventDeleteObjects value) {
    return new S3Event(new DeleteObjectsValue(value));
  }

  public static S3Event createMultipartUpload(S3EventCreateMultipartUpload value) {
    return new S3Event(new CreateMultipartUploadValue(value));
  }

  public static S3Event completeMultipartUpload(S3EventCompleteMultipartUpload value) {
    return new S3Event(new CompleteMultipartUploadValue(value));
  }

  public static S3Event abortMultipartUpload(S3EventAbortMultipartUpload value) {
    return new S3Event(new AbortMultipartUploadValue(value));
  }

  public static S3Event uploadPart(S3EventUploadPart value) {
    return new S3Event(new UploadPartValue(value));
  }

  public static S3Event uploadPartCopy(S3EventUploadPartCopy value) {
    return new S3Event(new UploadPartCopyValue(value));
  }

  public static S3Event listParts(S3EventListParts value) {
    return new S3Event(new ListPartsValue(value));
  }

  public static S3Event listMultipartUploads(S3EventListMultipartUploads value) {
    return new S3Event(new ListMultipartUploadsValue(value));
  }

  public boolean isListBuckets() {
    return value instanceof ListBucketsValue;
  }

  public boolean isDeleteBucket() {
    return value instanceof DeleteBucketValue;
  }

  public boolean isHeadBucket() {
    return value instanceof HeadBucketValue;
  }

  public boolean isCreateBucket() {
    return value instanceof CreateBucketValue;
  }

  public boolean isGetBucketAcl() {
    return value instanceof GetBucketAclValue;
  }

  public boolean isGetBucketCors() {
    return value instanceof GetBucketCorsValue;
  }

  public boolean isGetBucketEncryption() {
    return value instanceof GetBucketEncryptionValue;
  }

  public boolean isGetBucketLocation() {
    return value instanceof GetBucketLocationValue;
  }

  public boolean isGetBucketVersioning() {
    return value instanceof GetBucketVersioningValue;
  }

  public boolean isPutBucketAcl() {
    return value instanceof PutBucketAclValue;
  }

  public boolean isPutBucketCors() {
    return value instanceof PutBucketCorsValue;
  }

  public boolean isPutBucketEncryption() {
    return value instanceof PutBucketEncryptionValue;
  }

  public boolean isDeleteBucketCors() {
    return value instanceof DeleteBucketCorsValue;
  }

  public boolean isDeleteBucketEncryption() {
    return value instanceof DeleteBucketEncryptionValue;
  }

  public boolean isGetObjectLockConfiguration() {
    return value instanceof GetObjectLockConfigurationValue;
  }

  public boolean isPutObjectLockConfiguration() {
    return value instanceof PutObjectLockConfigurationValue;
  }

  public boolean isListObjectsV2() {
    return value instanceof ListObjectsV2Value;
  }

  public boolean isHeadObject() {
    return value instanceof HeadObjectValue;
  }

  public boolean isListObjectVersions() {
    return value instanceof ListObjectVersionsValue;
  }

  public boolean isGetObjectAcl() {
    return value instanceof GetObjectAclValue;
  }

  public boolean isPutObjectAcl() {
    return value instanceof PutObjectAclValue;
  }

  public boolean isGetObjectRetention() {
    return value instanceof GetObjectRetentionValue;
  }

  public boolean isPutObjectRetention() {
    return value instanceof PutObjectRetentionValue;
  }

  public boolean isGetObjectLegalHold() {
    return value instanceof GetObjectLegalHoldValue;
  }

  public boolean isPutObjectLegalHold() {
    return value instanceof PutObjectLegalHoldValue;
  }

  public boolean isGetObject() {
    return value instanceof GetObjectValue;
  }

  public boolean isPutObject() {
    return value instanceof PutObjectValue;
  }

  public boolean isPostObject() {
    return value instanceof PostObjectValue;
  }

  public boolean isCopyObject() {
    return value instanceof CopyObjectValue;
  }

  public boolean isDeleteObject() {
    return value instanceof DeleteObjectValue;
  }

  public boolean isDeleteObjects() {
    return value instanceof DeleteObjectsValue;
  }

  public boolean isCreateMultipartUpload() {
    return value instanceof CreateMultipartUploadValue;
  }

  public boolean isCompleteMultipartUpload() {
    return value instanceof CompleteMultipartUploadValue;
  }

  public boolean isAbortMultipartUpload() {
    return value instanceof AbortMultipartUploadValue;
  }

  public boolean isUploadPart() {
    return value instanceof UploadPartValue;
  }

  public boolean isUploadPartCopy() {
    return value instanceof UploadPartCopyValue;
  }

  public boolean isListParts() {
    return value instanceof ListPartsValue;
  }

  public boolean isListMultipartUploads() {
    return value instanceof ListMultipartUploadsValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<S3EventListBuckets> getListBuckets() {
    if (isListBuckets()) {
      return Optional.of(((ListBucketsValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventDeleteBucket> getDeleteBucket() {
    if (isDeleteBucket()) {
      return Optional.of(((DeleteBucketValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventHeadBucket> getHeadBucket() {
    if (isHeadBucket()) {
      return Optional.of(((HeadBucketValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventCreateBucket> getCreateBucket() {
    if (isCreateBucket()) {
      return Optional.of(((CreateBucketValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventGetBucketAcl> getGetBucketAcl() {
    if (isGetBucketAcl()) {
      return Optional.of(((GetBucketAclValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventGetBucketCors> getGetBucketCors() {
    if (isGetBucketCors()) {
      return Optional.of(((GetBucketCorsValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventGetBucketEncryption> getGetBucketEncryption() {
    if (isGetBucketEncryption()) {
      return Optional.of(((GetBucketEncryptionValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventGetBucketLocation> getGetBucketLocation() {
    if (isGetBucketLocation()) {
      return Optional.of(((GetBucketLocationValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventGetBucketVersioning> getGetBucketVersioning() {
    if (isGetBucketVersioning()) {
      return Optional.of(((GetBucketVersioningValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventPutBucketAcl> getPutBucketAcl() {
    if (isPutBucketAcl()) {
      return Optional.of(((PutBucketAclValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventPutBucketCors> getPutBucketCors() {
    if (isPutBucketCors()) {
      return Optional.of(((PutBucketCorsValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventPutBucketEncryption> getPutBucketEncryption() {
    if (isPutBucketEncryption()) {
      return Optional.of(((PutBucketEncryptionValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventDeleteBucketCors> getDeleteBucketCors() {
    if (isDeleteBucketCors()) {
      return Optional.of(((DeleteBucketCorsValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventDeleteBucketEncryption> getDeleteBucketEncryption() {
    if (isDeleteBucketEncryption()) {
      return Optional.of(((DeleteBucketEncryptionValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventGetObjectLockConfiguration> getGetObjectLockConfiguration() {
    if (isGetObjectLockConfiguration()) {
      return Optional.of(((GetObjectLockConfigurationValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventPutObjectLockConfiguration> getPutObjectLockConfiguration() {
    if (isPutObjectLockConfiguration()) {
      return Optional.of(((PutObjectLockConfigurationValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventListObjectsV2> getListObjectsV2() {
    if (isListObjectsV2()) {
      return Optional.of(((ListObjectsV2Value) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventHeadObject> getHeadObject() {
    if (isHeadObject()) {
      return Optional.of(((HeadObjectValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventListObjectVersions> getListObjectVersions() {
    if (isListObjectVersions()) {
      return Optional.of(((ListObjectVersionsValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventGetObjectAcl> getGetObjectAcl() {
    if (isGetObjectAcl()) {
      return Optional.of(((GetObjectAclValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventPutObjectAcl> getPutObjectAcl() {
    if (isPutObjectAcl()) {
      return Optional.of(((PutObjectAclValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventGetObjectRetention> getGetObjectRetention() {
    if (isGetObjectRetention()) {
      return Optional.of(((GetObjectRetentionValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventPutObjectRetention> getPutObjectRetention() {
    if (isPutObjectRetention()) {
      return Optional.of(((PutObjectRetentionValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventGetObjectLegalHold> getGetObjectLegalHold() {
    if (isGetObjectLegalHold()) {
      return Optional.of(((GetObjectLegalHoldValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventPutObjectLegalHold> getPutObjectLegalHold() {
    if (isPutObjectLegalHold()) {
      return Optional.of(((PutObjectLegalHoldValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventGetObject> getGetObject() {
    if (isGetObject()) {
      return Optional.of(((GetObjectValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventPutObject> getPutObject() {
    if (isPutObject()) {
      return Optional.of(((PutObjectValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventPostObject> getPostObject() {
    if (isPostObject()) {
      return Optional.of(((PostObjectValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventCopyObject> getCopyObject() {
    if (isCopyObject()) {
      return Optional.of(((CopyObjectValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventDeleteObject> getDeleteObject() {
    if (isDeleteObject()) {
      return Optional.of(((DeleteObjectValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventDeleteObjects> getDeleteObjects() {
    if (isDeleteObjects()) {
      return Optional.of(((DeleteObjectsValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventCreateMultipartUpload> getCreateMultipartUpload() {
    if (isCreateMultipartUpload()) {
      return Optional.of(((CreateMultipartUploadValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventCompleteMultipartUpload> getCompleteMultipartUpload() {
    if (isCompleteMultipartUpload()) {
      return Optional.of(((CompleteMultipartUploadValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventAbortMultipartUpload> getAbortMultipartUpload() {
    if (isAbortMultipartUpload()) {
      return Optional.of(((AbortMultipartUploadValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventUploadPart> getUploadPart() {
    if (isUploadPart()) {
      return Optional.of(((UploadPartValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventUploadPartCopy> getUploadPartCopy() {
    if (isUploadPartCopy()) {
      return Optional.of(((UploadPartCopyValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventListParts> getListParts() {
    if (isListParts()) {
      return Optional.of(((ListPartsValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<S3EventListMultipartUploads> getListMultipartUploads() {
    if (isListMultipartUploads()) {
      return Optional.of(((ListMultipartUploadsValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitListBuckets(S3EventListBuckets listBuckets);

    T visitDeleteBucket(S3EventDeleteBucket deleteBucket);

    T visitHeadBucket(S3EventHeadBucket headBucket);

    T visitCreateBucket(S3EventCreateBucket createBucket);

    T visitGetBucketAcl(S3EventGetBucketAcl getBucketAcl);

    T visitGetBucketCors(S3EventGetBucketCors getBucketCors);

    T visitGetBucketEncryption(S3EventGetBucketEncryption getBucketEncryption);

    T visitGetBucketLocation(S3EventGetBucketLocation getBucketLocation);

    T visitGetBucketVersioning(S3EventGetBucketVersioning getBucketVersioning);

    T visitPutBucketAcl(S3EventPutBucketAcl putBucketAcl);

    T visitPutBucketCors(S3EventPutBucketCors putBucketCors);

    T visitPutBucketEncryption(S3EventPutBucketEncryption putBucketEncryption);

    T visitDeleteBucketCors(S3EventDeleteBucketCors deleteBucketCors);

    T visitDeleteBucketEncryption(S3EventDeleteBucketEncryption deleteBucketEncryption);

    T visitGetObjectLockConfiguration(S3EventGetObjectLockConfiguration getObjectLockConfiguration);

    T visitPutObjectLockConfiguration(S3EventPutObjectLockConfiguration putObjectLockConfiguration);

    T visitListObjectsV2(S3EventListObjectsV2 listObjectsV2);

    T visitHeadObject(S3EventHeadObject headObject);

    T visitListObjectVersions(S3EventListObjectVersions listObjectVersions);

    T visitGetObjectAcl(S3EventGetObjectAcl getObjectAcl);

    T visitPutObjectAcl(S3EventPutObjectAcl putObjectAcl);

    T visitGetObjectRetention(S3EventGetObjectRetention getObjectRetention);

    T visitPutObjectRetention(S3EventPutObjectRetention putObjectRetention);

    T visitGetObjectLegalHold(S3EventGetObjectLegalHold getObjectLegalHold);

    T visitPutObjectLegalHold(S3EventPutObjectLegalHold putObjectLegalHold);

    T visitGetObject(S3EventGetObject getObject);

    T visitPutObject(S3EventPutObject putObject);

    T visitPostObject(S3EventPostObject postObject);

    T visitCopyObject(S3EventCopyObject copyObject);

    T visitDeleteObject(S3EventDeleteObject deleteObject);

    T visitDeleteObjects(S3EventDeleteObjects deleteObjects);

    T visitCreateMultipartUpload(S3EventCreateMultipartUpload createMultipartUpload);

    T visitCompleteMultipartUpload(S3EventCompleteMultipartUpload completeMultipartUpload);

    T visitAbortMultipartUpload(S3EventAbortMultipartUpload abortMultipartUpload);

    T visitUploadPart(S3EventUploadPart uploadPart);

    T visitUploadPartCopy(S3EventUploadPartCopy uploadPartCopy);

    T visitListParts(S3EventListParts listParts);

    T visitListMultipartUploads(S3EventListMultipartUploads listMultipartUploads);

    T _visitUnknown(Object unknownType);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "action",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(ListBucketsValue.class),
      @JsonSubTypes.Type(DeleteBucketValue.class),
      @JsonSubTypes.Type(HeadBucketValue.class),
      @JsonSubTypes.Type(CreateBucketValue.class),
      @JsonSubTypes.Type(GetBucketAclValue.class),
      @JsonSubTypes.Type(GetBucketCorsValue.class),
      @JsonSubTypes.Type(GetBucketEncryptionValue.class),
      @JsonSubTypes.Type(GetBucketLocationValue.class),
      @JsonSubTypes.Type(GetBucketVersioningValue.class),
      @JsonSubTypes.Type(PutBucketAclValue.class),
      @JsonSubTypes.Type(PutBucketCorsValue.class),
      @JsonSubTypes.Type(PutBucketEncryptionValue.class),
      @JsonSubTypes.Type(DeleteBucketCorsValue.class),
      @JsonSubTypes.Type(DeleteBucketEncryptionValue.class),
      @JsonSubTypes.Type(GetObjectLockConfigurationValue.class),
      @JsonSubTypes.Type(PutObjectLockConfigurationValue.class),
      @JsonSubTypes.Type(ListObjectsV2Value.class),
      @JsonSubTypes.Type(HeadObjectValue.class),
      @JsonSubTypes.Type(ListObjectVersionsValue.class),
      @JsonSubTypes.Type(GetObjectAclValue.class),
      @JsonSubTypes.Type(PutObjectAclValue.class),
      @JsonSubTypes.Type(GetObjectRetentionValue.class),
      @JsonSubTypes.Type(PutObjectRetentionValue.class),
      @JsonSubTypes.Type(GetObjectLegalHoldValue.class),
      @JsonSubTypes.Type(PutObjectLegalHoldValue.class),
      @JsonSubTypes.Type(GetObjectValue.class),
      @JsonSubTypes.Type(PutObjectValue.class),
      @JsonSubTypes.Type(PostObjectValue.class),
      @JsonSubTypes.Type(CopyObjectValue.class),
      @JsonSubTypes.Type(DeleteObjectValue.class),
      @JsonSubTypes.Type(DeleteObjectsValue.class),
      @JsonSubTypes.Type(CreateMultipartUploadValue.class),
      @JsonSubTypes.Type(CompleteMultipartUploadValue.class),
      @JsonSubTypes.Type(AbortMultipartUploadValue.class),
      @JsonSubTypes.Type(UploadPartValue.class),
      @JsonSubTypes.Type(UploadPartCopyValue.class),
      @JsonSubTypes.Type(ListPartsValue.class),
      @JsonSubTypes.Type(ListMultipartUploadsValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("ListBuckets")
  private static final class ListBucketsValue implements Value {
    @JsonUnwrapped
    private S3EventListBuckets value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private ListBucketsValue() {
    }

    private ListBucketsValue(S3EventListBuckets value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitListBuckets(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof ListBucketsValue && equalTo((ListBucketsValue) other);
    }

    private boolean equalTo(ListBucketsValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("DeleteBucket")
  private static final class DeleteBucketValue implements Value {
    @JsonUnwrapped
    private S3EventDeleteBucket value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private DeleteBucketValue() {
    }

    private DeleteBucketValue(S3EventDeleteBucket value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitDeleteBucket(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof DeleteBucketValue && equalTo((DeleteBucketValue) other);
    }

    private boolean equalTo(DeleteBucketValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("HeadBucket")
  private static final class HeadBucketValue implements Value {
    @JsonUnwrapped
    private S3EventHeadBucket value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private HeadBucketValue() {
    }

    private HeadBucketValue(S3EventHeadBucket value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitHeadBucket(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof HeadBucketValue && equalTo((HeadBucketValue) other);
    }

    private boolean equalTo(HeadBucketValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("CreateBucket")
  private static final class CreateBucketValue implements Value {
    @JsonUnwrapped
    private S3EventCreateBucket value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private CreateBucketValue() {
    }

    private CreateBucketValue(S3EventCreateBucket value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitCreateBucket(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof CreateBucketValue && equalTo((CreateBucketValue) other);
    }

    private boolean equalTo(CreateBucketValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("GetBucketAcl")
  private static final class GetBucketAclValue implements Value {
    @JsonUnwrapped
    private S3EventGetBucketAcl value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GetBucketAclValue() {
    }

    private GetBucketAclValue(S3EventGetBucketAcl value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGetBucketAcl(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GetBucketAclValue && equalTo((GetBucketAclValue) other);
    }

    private boolean equalTo(GetBucketAclValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("GetBucketCors")
  private static final class GetBucketCorsValue implements Value {
    @JsonUnwrapped
    private S3EventGetBucketCors value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GetBucketCorsValue() {
    }

    private GetBucketCorsValue(S3EventGetBucketCors value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGetBucketCors(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GetBucketCorsValue && equalTo((GetBucketCorsValue) other);
    }

    private boolean equalTo(GetBucketCorsValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("GetBucketEncryption")
  private static final class GetBucketEncryptionValue implements Value {
    @JsonUnwrapped
    private S3EventGetBucketEncryption value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GetBucketEncryptionValue() {
    }

    private GetBucketEncryptionValue(S3EventGetBucketEncryption value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGetBucketEncryption(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GetBucketEncryptionValue && equalTo((GetBucketEncryptionValue) other);
    }

    private boolean equalTo(GetBucketEncryptionValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("GetBucketLocation")
  private static final class GetBucketLocationValue implements Value {
    @JsonUnwrapped
    private S3EventGetBucketLocation value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GetBucketLocationValue() {
    }

    private GetBucketLocationValue(S3EventGetBucketLocation value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGetBucketLocation(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GetBucketLocationValue && equalTo((GetBucketLocationValue) other);
    }

    private boolean equalTo(GetBucketLocationValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("GetBucketVersioning")
  private static final class GetBucketVersioningValue implements Value {
    @JsonUnwrapped
    private S3EventGetBucketVersioning value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GetBucketVersioningValue() {
    }

    private GetBucketVersioningValue(S3EventGetBucketVersioning value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGetBucketVersioning(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GetBucketVersioningValue && equalTo((GetBucketVersioningValue) other);
    }

    private boolean equalTo(GetBucketVersioningValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("PutBucketAcl")
  private static final class PutBucketAclValue implements Value {
    @JsonUnwrapped
    private S3EventPutBucketAcl value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PutBucketAclValue() {
    }

    private PutBucketAclValue(S3EventPutBucketAcl value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPutBucketAcl(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PutBucketAclValue && equalTo((PutBucketAclValue) other);
    }

    private boolean equalTo(PutBucketAclValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("PutBucketCors")
  private static final class PutBucketCorsValue implements Value {
    @JsonUnwrapped
    private S3EventPutBucketCors value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PutBucketCorsValue() {
    }

    private PutBucketCorsValue(S3EventPutBucketCors value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPutBucketCors(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PutBucketCorsValue && equalTo((PutBucketCorsValue) other);
    }

    private boolean equalTo(PutBucketCorsValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("PutBucketEncryption")
  private static final class PutBucketEncryptionValue implements Value {
    @JsonUnwrapped
    private S3EventPutBucketEncryption value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PutBucketEncryptionValue() {
    }

    private PutBucketEncryptionValue(S3EventPutBucketEncryption value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPutBucketEncryption(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PutBucketEncryptionValue && equalTo((PutBucketEncryptionValue) other);
    }

    private boolean equalTo(PutBucketEncryptionValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("DeleteBucketCors")
  private static final class DeleteBucketCorsValue implements Value {
    @JsonUnwrapped
    private S3EventDeleteBucketCors value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private DeleteBucketCorsValue() {
    }

    private DeleteBucketCorsValue(S3EventDeleteBucketCors value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitDeleteBucketCors(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof DeleteBucketCorsValue && equalTo((DeleteBucketCorsValue) other);
    }

    private boolean equalTo(DeleteBucketCorsValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("DeleteBucketEncryption")
  private static final class DeleteBucketEncryptionValue implements Value {
    @JsonUnwrapped
    private S3EventDeleteBucketEncryption value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private DeleteBucketEncryptionValue() {
    }

    private DeleteBucketEncryptionValue(S3EventDeleteBucketEncryption value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitDeleteBucketEncryption(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof DeleteBucketEncryptionValue && equalTo((DeleteBucketEncryptionValue) other);
    }

    private boolean equalTo(DeleteBucketEncryptionValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("GetObjectLockConfiguration")
  private static final class GetObjectLockConfigurationValue implements Value {
    @JsonUnwrapped
    private S3EventGetObjectLockConfiguration value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GetObjectLockConfigurationValue() {
    }

    private GetObjectLockConfigurationValue(S3EventGetObjectLockConfiguration value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGetObjectLockConfiguration(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GetObjectLockConfigurationValue && equalTo((GetObjectLockConfigurationValue) other);
    }

    private boolean equalTo(GetObjectLockConfigurationValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("PutObjectLockConfiguration")
  private static final class PutObjectLockConfigurationValue implements Value {
    @JsonUnwrapped
    private S3EventPutObjectLockConfiguration value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PutObjectLockConfigurationValue() {
    }

    private PutObjectLockConfigurationValue(S3EventPutObjectLockConfiguration value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPutObjectLockConfiguration(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PutObjectLockConfigurationValue && equalTo((PutObjectLockConfigurationValue) other);
    }

    private boolean equalTo(PutObjectLockConfigurationValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("ListObjectsV2")
  private static final class ListObjectsV2Value implements Value {
    @JsonUnwrapped
    private S3EventListObjectsV2 value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private ListObjectsV2Value() {
    }

    private ListObjectsV2Value(S3EventListObjectsV2 value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitListObjectsV2(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof ListObjectsV2Value && equalTo((ListObjectsV2Value) other);
    }

    private boolean equalTo(ListObjectsV2Value other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("HeadObject")
  private static final class HeadObjectValue implements Value {
    @JsonUnwrapped
    private S3EventHeadObject value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private HeadObjectValue() {
    }

    private HeadObjectValue(S3EventHeadObject value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitHeadObject(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof HeadObjectValue && equalTo((HeadObjectValue) other);
    }

    private boolean equalTo(HeadObjectValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("ListObjectVersions")
  private static final class ListObjectVersionsValue implements Value {
    @JsonUnwrapped
    private S3EventListObjectVersions value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private ListObjectVersionsValue() {
    }

    private ListObjectVersionsValue(S3EventListObjectVersions value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitListObjectVersions(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof ListObjectVersionsValue && equalTo((ListObjectVersionsValue) other);
    }

    private boolean equalTo(ListObjectVersionsValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("GetObjectAcl")
  private static final class GetObjectAclValue implements Value {
    @JsonUnwrapped
    private S3EventGetObjectAcl value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GetObjectAclValue() {
    }

    private GetObjectAclValue(S3EventGetObjectAcl value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGetObjectAcl(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GetObjectAclValue && equalTo((GetObjectAclValue) other);
    }

    private boolean equalTo(GetObjectAclValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("PutObjectAcl")
  private static final class PutObjectAclValue implements Value {
    @JsonUnwrapped
    private S3EventPutObjectAcl value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PutObjectAclValue() {
    }

    private PutObjectAclValue(S3EventPutObjectAcl value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPutObjectAcl(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PutObjectAclValue && equalTo((PutObjectAclValue) other);
    }

    private boolean equalTo(PutObjectAclValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("GetObjectRetention")
  private static final class GetObjectRetentionValue implements Value {
    @JsonUnwrapped
    private S3EventGetObjectRetention value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GetObjectRetentionValue() {
    }

    private GetObjectRetentionValue(S3EventGetObjectRetention value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGetObjectRetention(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GetObjectRetentionValue && equalTo((GetObjectRetentionValue) other);
    }

    private boolean equalTo(GetObjectRetentionValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("PutObjectRetention")
  private static final class PutObjectRetentionValue implements Value {
    @JsonUnwrapped
    private S3EventPutObjectRetention value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PutObjectRetentionValue() {
    }

    private PutObjectRetentionValue(S3EventPutObjectRetention value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPutObjectRetention(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PutObjectRetentionValue && equalTo((PutObjectRetentionValue) other);
    }

    private boolean equalTo(PutObjectRetentionValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("GetObjectLegalHold")
  private static final class GetObjectLegalHoldValue implements Value {
    @JsonUnwrapped
    private S3EventGetObjectLegalHold value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GetObjectLegalHoldValue() {
    }

    private GetObjectLegalHoldValue(S3EventGetObjectLegalHold value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGetObjectLegalHold(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GetObjectLegalHoldValue && equalTo((GetObjectLegalHoldValue) other);
    }

    private boolean equalTo(GetObjectLegalHoldValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("PutObjectLegalHold")
  private static final class PutObjectLegalHoldValue implements Value {
    @JsonUnwrapped
    private S3EventPutObjectLegalHold value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PutObjectLegalHoldValue() {
    }

    private PutObjectLegalHoldValue(S3EventPutObjectLegalHold value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPutObjectLegalHold(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PutObjectLegalHoldValue && equalTo((PutObjectLegalHoldValue) other);
    }

    private boolean equalTo(PutObjectLegalHoldValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("GetObject")
  private static final class GetObjectValue implements Value {
    @JsonUnwrapped
    private S3EventGetObject value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GetObjectValue() {
    }

    private GetObjectValue(S3EventGetObject value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGetObject(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GetObjectValue && equalTo((GetObjectValue) other);
    }

    private boolean equalTo(GetObjectValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("PutObject")
  private static final class PutObjectValue implements Value {
    @JsonUnwrapped
    private S3EventPutObject value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PutObjectValue() {
    }

    private PutObjectValue(S3EventPutObject value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPutObject(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PutObjectValue && equalTo((PutObjectValue) other);
    }

    private boolean equalTo(PutObjectValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("PostObject")
  private static final class PostObjectValue implements Value {
    @JsonUnwrapped
    private S3EventPostObject value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PostObjectValue() {
    }

    private PostObjectValue(S3EventPostObject value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPostObject(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PostObjectValue && equalTo((PostObjectValue) other);
    }

    private boolean equalTo(PostObjectValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("CopyObject")
  private static final class CopyObjectValue implements Value {
    @JsonUnwrapped
    private S3EventCopyObject value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private CopyObjectValue() {
    }

    private CopyObjectValue(S3EventCopyObject value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitCopyObject(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof CopyObjectValue && equalTo((CopyObjectValue) other);
    }

    private boolean equalTo(CopyObjectValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("DeleteObject")
  private static final class DeleteObjectValue implements Value {
    @JsonUnwrapped
    private S3EventDeleteObject value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private DeleteObjectValue() {
    }

    private DeleteObjectValue(S3EventDeleteObject value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitDeleteObject(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof DeleteObjectValue && equalTo((DeleteObjectValue) other);
    }

    private boolean equalTo(DeleteObjectValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("DeleteObjects")
  private static final class DeleteObjectsValue implements Value {
    @JsonUnwrapped
    private S3EventDeleteObjects value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private DeleteObjectsValue() {
    }

    private DeleteObjectsValue(S3EventDeleteObjects value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitDeleteObjects(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof DeleteObjectsValue && equalTo((DeleteObjectsValue) other);
    }

    private boolean equalTo(DeleteObjectsValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("CreateMultipartUpload")
  private static final class CreateMultipartUploadValue implements Value {
    @JsonUnwrapped
    private S3EventCreateMultipartUpload value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private CreateMultipartUploadValue() {
    }

    private CreateMultipartUploadValue(S3EventCreateMultipartUpload value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitCreateMultipartUpload(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof CreateMultipartUploadValue && equalTo((CreateMultipartUploadValue) other);
    }

    private boolean equalTo(CreateMultipartUploadValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("CompleteMultipartUpload")
  private static final class CompleteMultipartUploadValue implements Value {
    @JsonUnwrapped
    private S3EventCompleteMultipartUpload value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private CompleteMultipartUploadValue() {
    }

    private CompleteMultipartUploadValue(S3EventCompleteMultipartUpload value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitCompleteMultipartUpload(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof CompleteMultipartUploadValue && equalTo((CompleteMultipartUploadValue) other);
    }

    private boolean equalTo(CompleteMultipartUploadValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("AbortMultipartUpload")
  private static final class AbortMultipartUploadValue implements Value {
    @JsonUnwrapped
    private S3EventAbortMultipartUpload value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private AbortMultipartUploadValue() {
    }

    private AbortMultipartUploadValue(S3EventAbortMultipartUpload value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitAbortMultipartUpload(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof AbortMultipartUploadValue && equalTo((AbortMultipartUploadValue) other);
    }

    private boolean equalTo(AbortMultipartUploadValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("UploadPart")
  private static final class UploadPartValue implements Value {
    @JsonUnwrapped
    private S3EventUploadPart value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private UploadPartValue() {
    }

    private UploadPartValue(S3EventUploadPart value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitUploadPart(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof UploadPartValue && equalTo((UploadPartValue) other);
    }

    private boolean equalTo(UploadPartValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("UploadPartCopy")
  private static final class UploadPartCopyValue implements Value {
    @JsonUnwrapped
    private S3EventUploadPartCopy value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private UploadPartCopyValue() {
    }

    private UploadPartCopyValue(S3EventUploadPartCopy value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitUploadPartCopy(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof UploadPartCopyValue && equalTo((UploadPartCopyValue) other);
    }

    private boolean equalTo(UploadPartCopyValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("ListParts")
  private static final class ListPartsValue implements Value {
    @JsonUnwrapped
    private S3EventListParts value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private ListPartsValue() {
    }

    private ListPartsValue(S3EventListParts value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitListParts(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof ListPartsValue && equalTo((ListPartsValue) other);
    }

    private boolean equalTo(ListPartsValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("ListMultipartUploads")
  private static final class ListMultipartUploadsValue implements Value {
    @JsonUnwrapped
    private S3EventListMultipartUploads value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private ListMultipartUploadsValue() {
    }

    private ListMultipartUploadsValue(S3EventListMultipartUploads value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitListMultipartUploads(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof ListMultipartUploadsValue && equalTo((ListMultipartUploadsValue) other);
    }

    private boolean equalTo(ListMultipartUploadsValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "value: " + value + "}";
    }
  }

  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @Override
    public String toString() {
      return "S3Event{" + "type: " + type + ", value: " + value + "}";
    }
  }
}
