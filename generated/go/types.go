// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
	time "time"
)

type ReceiveS3EventResponse struct {
	Message *string `json:"message,omitempty"`

	_rawJSON json.RawMessage
}

func (r *ReceiveS3EventResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceiveS3EventResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceiveS3EventResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceiveS3EventResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type S3Event struct {
	Action                     string
	ListBuckets                *S3EventListBuckets
	DeleteBucket               *S3EventDeleteBucket
	HeadBucket                 *S3EventHeadBucket
	CreateBucket               *S3EventCreateBucket
	GetBucketAcl               *S3EventGetBucketAcl
	GetBucketCors              *S3EventGetBucketCors
	GetBucketEncryption        *S3EventGetBucketEncryption
	GetBucketLocation          *S3EventGetBucketLocation
	GetBucketVersioning        *S3EventGetBucketVersioning
	PutBucketAcl               *S3EventPutBucketAcl
	PutBucketCors              *S3EventPutBucketCors
	PutBucketEncryption        *S3EventPutBucketEncryption
	DeleteBucketCors           *S3EventDeleteBucketCors
	DeleteBucketEncryption     *S3EventDeleteBucketEncryption
	GetObjectLockConfiguration *S3EventGetObjectLockConfiguration
	PutObjectLockConfiguration *S3EventPutObjectLockConfiguration
	ListObjectsV2              *S3EventListObjectsV2
	HeadObject                 *S3EventHeadObject
	ListObjectVersions         *S3EventListObjectVersions
	GetObjectAcl               *S3EventGetObjectAcl
	PutObjectAcl               *S3EventPutObjectAcl
	GetObjectRetention         *S3EventGetObjectRetention
	PutObjectRetention         *S3EventPutObjectRetention
	GetObjectLegalHold         *S3EventGetObjectLegalHold
	PutObjectLegalHold         *S3EventPutObjectLegalHold
	GetObject                  *S3EventGetObject
	PutObject                  *S3EventPutObject
	PostObject                 *S3EventPostObject
	CopyObject                 *S3EventCopyObject
	DeleteObject               *S3EventDeleteObject
	DeleteObjects              *S3EventDeleteObjects
	CreateMultipartUpload      *S3EventCreateMultipartUpload
	CompleteMultipartUpload    *S3EventCompleteMultipartUpload
	AbortMultipartUpload       *S3EventAbortMultipartUpload
	UploadPart                 *S3EventUploadPart
	UploadPartCopy             *S3EventUploadPartCopy
	ListParts                  *S3EventListParts
	ListMultipartUploads       *S3EventListMultipartUploads
}

func NewS3EventFromListBuckets(value *S3EventListBuckets) *S3Event {
	return &S3Event{Action: "ListBuckets", ListBuckets: value}
}

func NewS3EventFromDeleteBucket(value *S3EventDeleteBucket) *S3Event {
	return &S3Event{Action: "DeleteBucket", DeleteBucket: value}
}

func NewS3EventFromHeadBucket(value *S3EventHeadBucket) *S3Event {
	return &S3Event{Action: "HeadBucket", HeadBucket: value}
}

func NewS3EventFromCreateBucket(value *S3EventCreateBucket) *S3Event {
	return &S3Event{Action: "CreateBucket", CreateBucket: value}
}

func NewS3EventFromGetBucketAcl(value *S3EventGetBucketAcl) *S3Event {
	return &S3Event{Action: "GetBucketAcl", GetBucketAcl: value}
}

func NewS3EventFromGetBucketCors(value *S3EventGetBucketCors) *S3Event {
	return &S3Event{Action: "GetBucketCors", GetBucketCors: value}
}

func NewS3EventFromGetBucketEncryption(value *S3EventGetBucketEncryption) *S3Event {
	return &S3Event{Action: "GetBucketEncryption", GetBucketEncryption: value}
}

func NewS3EventFromGetBucketLocation(value *S3EventGetBucketLocation) *S3Event {
	return &S3Event{Action: "GetBucketLocation", GetBucketLocation: value}
}

func NewS3EventFromGetBucketVersioning(value *S3EventGetBucketVersioning) *S3Event {
	return &S3Event{Action: "GetBucketVersioning", GetBucketVersioning: value}
}

func NewS3EventFromPutBucketAcl(value *S3EventPutBucketAcl) *S3Event {
	return &S3Event{Action: "PutBucketAcl", PutBucketAcl: value}
}

func NewS3EventFromPutBucketCors(value *S3EventPutBucketCors) *S3Event {
	return &S3Event{Action: "PutBucketCors", PutBucketCors: value}
}

func NewS3EventFromPutBucketEncryption(value *S3EventPutBucketEncryption) *S3Event {
	return &S3Event{Action: "PutBucketEncryption", PutBucketEncryption: value}
}

func NewS3EventFromDeleteBucketCors(value *S3EventDeleteBucketCors) *S3Event {
	return &S3Event{Action: "DeleteBucketCors", DeleteBucketCors: value}
}

func NewS3EventFromDeleteBucketEncryption(value *S3EventDeleteBucketEncryption) *S3Event {
	return &S3Event{Action: "DeleteBucketEncryption", DeleteBucketEncryption: value}
}

func NewS3EventFromGetObjectLockConfiguration(value *S3EventGetObjectLockConfiguration) *S3Event {
	return &S3Event{Action: "GetObjectLockConfiguration", GetObjectLockConfiguration: value}
}

func NewS3EventFromPutObjectLockConfiguration(value *S3EventPutObjectLockConfiguration) *S3Event {
	return &S3Event{Action: "PutObjectLockConfiguration", PutObjectLockConfiguration: value}
}

func NewS3EventFromListObjectsV2(value *S3EventListObjectsV2) *S3Event {
	return &S3Event{Action: "ListObjectsV2", ListObjectsV2: value}
}

func NewS3EventFromHeadObject(value *S3EventHeadObject) *S3Event {
	return &S3Event{Action: "HeadObject", HeadObject: value}
}

func NewS3EventFromListObjectVersions(value *S3EventListObjectVersions) *S3Event {
	return &S3Event{Action: "ListObjectVersions", ListObjectVersions: value}
}

func NewS3EventFromGetObjectAcl(value *S3EventGetObjectAcl) *S3Event {
	return &S3Event{Action: "GetObjectAcl", GetObjectAcl: value}
}

func NewS3EventFromPutObjectAcl(value *S3EventPutObjectAcl) *S3Event {
	return &S3Event{Action: "PutObjectAcl", PutObjectAcl: value}
}

func NewS3EventFromGetObjectRetention(value *S3EventGetObjectRetention) *S3Event {
	return &S3Event{Action: "GetObjectRetention", GetObjectRetention: value}
}

func NewS3EventFromPutObjectRetention(value *S3EventPutObjectRetention) *S3Event {
	return &S3Event{Action: "PutObjectRetention", PutObjectRetention: value}
}

func NewS3EventFromGetObjectLegalHold(value *S3EventGetObjectLegalHold) *S3Event {
	return &S3Event{Action: "GetObjectLegalHold", GetObjectLegalHold: value}
}

func NewS3EventFromPutObjectLegalHold(value *S3EventPutObjectLegalHold) *S3Event {
	return &S3Event{Action: "PutObjectLegalHold", PutObjectLegalHold: value}
}

func NewS3EventFromGetObject(value *S3EventGetObject) *S3Event {
	return &S3Event{Action: "GetObject", GetObject: value}
}

func NewS3EventFromPutObject(value *S3EventPutObject) *S3Event {
	return &S3Event{Action: "PutObject", PutObject: value}
}

func NewS3EventFromPostObject(value *S3EventPostObject) *S3Event {
	return &S3Event{Action: "PostObject", PostObject: value}
}

func NewS3EventFromCopyObject(value *S3EventCopyObject) *S3Event {
	return &S3Event{Action: "CopyObject", CopyObject: value}
}

func NewS3EventFromDeleteObject(value *S3EventDeleteObject) *S3Event {
	return &S3Event{Action: "DeleteObject", DeleteObject: value}
}

func NewS3EventFromDeleteObjects(value *S3EventDeleteObjects) *S3Event {
	return &S3Event{Action: "DeleteObjects", DeleteObjects: value}
}

func NewS3EventFromCreateMultipartUpload(value *S3EventCreateMultipartUpload) *S3Event {
	return &S3Event{Action: "CreateMultipartUpload", CreateMultipartUpload: value}
}

func NewS3EventFromCompleteMultipartUpload(value *S3EventCompleteMultipartUpload) *S3Event {
	return &S3Event{Action: "CompleteMultipartUpload", CompleteMultipartUpload: value}
}

func NewS3EventFromAbortMultipartUpload(value *S3EventAbortMultipartUpload) *S3Event {
	return &S3Event{Action: "AbortMultipartUpload", AbortMultipartUpload: value}
}

func NewS3EventFromUploadPart(value *S3EventUploadPart) *S3Event {
	return &S3Event{Action: "UploadPart", UploadPart: value}
}

func NewS3EventFromUploadPartCopy(value *S3EventUploadPartCopy) *S3Event {
	return &S3Event{Action: "UploadPartCopy", UploadPartCopy: value}
}

func NewS3EventFromListParts(value *S3EventListParts) *S3Event {
	return &S3Event{Action: "ListParts", ListParts: value}
}

func NewS3EventFromListMultipartUploads(value *S3EventListMultipartUploads) *S3Event {
	return &S3Event{Action: "ListMultipartUploads", ListMultipartUploads: value}
}

func (s *S3Event) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Action string `json:"action"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.Action = unmarshaler.Action
	switch unmarshaler.Action {
	case "ListBuckets":
		value := new(S3EventListBuckets)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.ListBuckets = value
	case "DeleteBucket":
		value := new(S3EventDeleteBucket)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.DeleteBucket = value
	case "HeadBucket":
		value := new(S3EventHeadBucket)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.HeadBucket = value
	case "CreateBucket":
		value := new(S3EventCreateBucket)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.CreateBucket = value
	case "GetBucketAcl":
		value := new(S3EventGetBucketAcl)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.GetBucketAcl = value
	case "GetBucketCors":
		value := new(S3EventGetBucketCors)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.GetBucketCors = value
	case "GetBucketEncryption":
		value := new(S3EventGetBucketEncryption)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.GetBucketEncryption = value
	case "GetBucketLocation":
		value := new(S3EventGetBucketLocation)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.GetBucketLocation = value
	case "GetBucketVersioning":
		value := new(S3EventGetBucketVersioning)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.GetBucketVersioning = value
	case "PutBucketAcl":
		value := new(S3EventPutBucketAcl)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.PutBucketAcl = value
	case "PutBucketCors":
		value := new(S3EventPutBucketCors)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.PutBucketCors = value
	case "PutBucketEncryption":
		value := new(S3EventPutBucketEncryption)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.PutBucketEncryption = value
	case "DeleteBucketCors":
		value := new(S3EventDeleteBucketCors)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.DeleteBucketCors = value
	case "DeleteBucketEncryption":
		value := new(S3EventDeleteBucketEncryption)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.DeleteBucketEncryption = value
	case "GetObjectLockConfiguration":
		value := new(S3EventGetObjectLockConfiguration)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.GetObjectLockConfiguration = value
	case "PutObjectLockConfiguration":
		value := new(S3EventPutObjectLockConfiguration)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.PutObjectLockConfiguration = value
	case "ListObjectsV2":
		value := new(S3EventListObjectsV2)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.ListObjectsV2 = value
	case "HeadObject":
		value := new(S3EventHeadObject)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.HeadObject = value
	case "ListObjectVersions":
		value := new(S3EventListObjectVersions)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.ListObjectVersions = value
	case "GetObjectAcl":
		value := new(S3EventGetObjectAcl)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.GetObjectAcl = value
	case "PutObjectAcl":
		value := new(S3EventPutObjectAcl)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.PutObjectAcl = value
	case "GetObjectRetention":
		value := new(S3EventGetObjectRetention)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.GetObjectRetention = value
	case "PutObjectRetention":
		value := new(S3EventPutObjectRetention)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.PutObjectRetention = value
	case "GetObjectLegalHold":
		value := new(S3EventGetObjectLegalHold)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.GetObjectLegalHold = value
	case "PutObjectLegalHold":
		value := new(S3EventPutObjectLegalHold)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.PutObjectLegalHold = value
	case "GetObject":
		value := new(S3EventGetObject)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.GetObject = value
	case "PutObject":
		value := new(S3EventPutObject)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.PutObject = value
	case "PostObject":
		value := new(S3EventPostObject)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.PostObject = value
	case "CopyObject":
		value := new(S3EventCopyObject)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.CopyObject = value
	case "DeleteObject":
		value := new(S3EventDeleteObject)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.DeleteObject = value
	case "DeleteObjects":
		value := new(S3EventDeleteObjects)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.DeleteObjects = value
	case "CreateMultipartUpload":
		value := new(S3EventCreateMultipartUpload)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.CreateMultipartUpload = value
	case "CompleteMultipartUpload":
		value := new(S3EventCompleteMultipartUpload)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.CompleteMultipartUpload = value
	case "AbortMultipartUpload":
		value := new(S3EventAbortMultipartUpload)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.AbortMultipartUpload = value
	case "UploadPart":
		value := new(S3EventUploadPart)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.UploadPart = value
	case "UploadPartCopy":
		value := new(S3EventUploadPartCopy)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.UploadPartCopy = value
	case "ListParts":
		value := new(S3EventListParts)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.ListParts = value
	case "ListMultipartUploads":
		value := new(S3EventListMultipartUploads)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.ListMultipartUploads = value
	}
	return nil
}

func (s S3Event) MarshalJSON() ([]byte, error) {
	switch s.Action {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.Action, s)
	case "ListBuckets":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventListBuckets
		}{
			Action:             s.Action,
			S3EventListBuckets: s.ListBuckets,
		}
		return json.Marshal(marshaler)
	case "DeleteBucket":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventDeleteBucket
		}{
			Action:              s.Action,
			S3EventDeleteBucket: s.DeleteBucket,
		}
		return json.Marshal(marshaler)
	case "HeadBucket":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventHeadBucket
		}{
			Action:            s.Action,
			S3EventHeadBucket: s.HeadBucket,
		}
		return json.Marshal(marshaler)
	case "CreateBucket":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventCreateBucket
		}{
			Action:              s.Action,
			S3EventCreateBucket: s.CreateBucket,
		}
		return json.Marshal(marshaler)
	case "GetBucketAcl":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventGetBucketAcl
		}{
			Action:              s.Action,
			S3EventGetBucketAcl: s.GetBucketAcl,
		}
		return json.Marshal(marshaler)
	case "GetBucketCors":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventGetBucketCors
		}{
			Action:               s.Action,
			S3EventGetBucketCors: s.GetBucketCors,
		}
		return json.Marshal(marshaler)
	case "GetBucketEncryption":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventGetBucketEncryption
		}{
			Action:                     s.Action,
			S3EventGetBucketEncryption: s.GetBucketEncryption,
		}
		return json.Marshal(marshaler)
	case "GetBucketLocation":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventGetBucketLocation
		}{
			Action:                   s.Action,
			S3EventGetBucketLocation: s.GetBucketLocation,
		}
		return json.Marshal(marshaler)
	case "GetBucketVersioning":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventGetBucketVersioning
		}{
			Action:                     s.Action,
			S3EventGetBucketVersioning: s.GetBucketVersioning,
		}
		return json.Marshal(marshaler)
	case "PutBucketAcl":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventPutBucketAcl
		}{
			Action:              s.Action,
			S3EventPutBucketAcl: s.PutBucketAcl,
		}
		return json.Marshal(marshaler)
	case "PutBucketCors":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventPutBucketCors
		}{
			Action:               s.Action,
			S3EventPutBucketCors: s.PutBucketCors,
		}
		return json.Marshal(marshaler)
	case "PutBucketEncryption":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventPutBucketEncryption
		}{
			Action:                     s.Action,
			S3EventPutBucketEncryption: s.PutBucketEncryption,
		}
		return json.Marshal(marshaler)
	case "DeleteBucketCors":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventDeleteBucketCors
		}{
			Action:                  s.Action,
			S3EventDeleteBucketCors: s.DeleteBucketCors,
		}
		return json.Marshal(marshaler)
	case "DeleteBucketEncryption":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventDeleteBucketEncryption
		}{
			Action:                        s.Action,
			S3EventDeleteBucketEncryption: s.DeleteBucketEncryption,
		}
		return json.Marshal(marshaler)
	case "GetObjectLockConfiguration":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventGetObjectLockConfiguration
		}{
			Action:                            s.Action,
			S3EventGetObjectLockConfiguration: s.GetObjectLockConfiguration,
		}
		return json.Marshal(marshaler)
	case "PutObjectLockConfiguration":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventPutObjectLockConfiguration
		}{
			Action:                            s.Action,
			S3EventPutObjectLockConfiguration: s.PutObjectLockConfiguration,
		}
		return json.Marshal(marshaler)
	case "ListObjectsV2":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventListObjectsV2
		}{
			Action:               s.Action,
			S3EventListObjectsV2: s.ListObjectsV2,
		}
		return json.Marshal(marshaler)
	case "HeadObject":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventHeadObject
		}{
			Action:            s.Action,
			S3EventHeadObject: s.HeadObject,
		}
		return json.Marshal(marshaler)
	case "ListObjectVersions":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventListObjectVersions
		}{
			Action:                    s.Action,
			S3EventListObjectVersions: s.ListObjectVersions,
		}
		return json.Marshal(marshaler)
	case "GetObjectAcl":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventGetObjectAcl
		}{
			Action:              s.Action,
			S3EventGetObjectAcl: s.GetObjectAcl,
		}
		return json.Marshal(marshaler)
	case "PutObjectAcl":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventPutObjectAcl
		}{
			Action:              s.Action,
			S3EventPutObjectAcl: s.PutObjectAcl,
		}
		return json.Marshal(marshaler)
	case "GetObjectRetention":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventGetObjectRetention
		}{
			Action:                    s.Action,
			S3EventGetObjectRetention: s.GetObjectRetention,
		}
		return json.Marshal(marshaler)
	case "PutObjectRetention":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventPutObjectRetention
		}{
			Action:                    s.Action,
			S3EventPutObjectRetention: s.PutObjectRetention,
		}
		return json.Marshal(marshaler)
	case "GetObjectLegalHold":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventGetObjectLegalHold
		}{
			Action:                    s.Action,
			S3EventGetObjectLegalHold: s.GetObjectLegalHold,
		}
		return json.Marshal(marshaler)
	case "PutObjectLegalHold":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventPutObjectLegalHold
		}{
			Action:                    s.Action,
			S3EventPutObjectLegalHold: s.PutObjectLegalHold,
		}
		return json.Marshal(marshaler)
	case "GetObject":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventGetObject
		}{
			Action:           s.Action,
			S3EventGetObject: s.GetObject,
		}
		return json.Marshal(marshaler)
	case "PutObject":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventPutObject
		}{
			Action:           s.Action,
			S3EventPutObject: s.PutObject,
		}
		return json.Marshal(marshaler)
	case "PostObject":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventPostObject
		}{
			Action:            s.Action,
			S3EventPostObject: s.PostObject,
		}
		return json.Marshal(marshaler)
	case "CopyObject":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventCopyObject
		}{
			Action:            s.Action,
			S3EventCopyObject: s.CopyObject,
		}
		return json.Marshal(marshaler)
	case "DeleteObject":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventDeleteObject
		}{
			Action:              s.Action,
			S3EventDeleteObject: s.DeleteObject,
		}
		return json.Marshal(marshaler)
	case "DeleteObjects":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventDeleteObjects
		}{
			Action:               s.Action,
			S3EventDeleteObjects: s.DeleteObjects,
		}
		return json.Marshal(marshaler)
	case "CreateMultipartUpload":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventCreateMultipartUpload
		}{
			Action:                       s.Action,
			S3EventCreateMultipartUpload: s.CreateMultipartUpload,
		}
		return json.Marshal(marshaler)
	case "CompleteMultipartUpload":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventCompleteMultipartUpload
		}{
			Action:                         s.Action,
			S3EventCompleteMultipartUpload: s.CompleteMultipartUpload,
		}
		return json.Marshal(marshaler)
	case "AbortMultipartUpload":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventAbortMultipartUpload
		}{
			Action:                      s.Action,
			S3EventAbortMultipartUpload: s.AbortMultipartUpload,
		}
		return json.Marshal(marshaler)
	case "UploadPart":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventUploadPart
		}{
			Action:            s.Action,
			S3EventUploadPart: s.UploadPart,
		}
		return json.Marshal(marshaler)
	case "UploadPartCopy":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventUploadPartCopy
		}{
			Action:                s.Action,
			S3EventUploadPartCopy: s.UploadPartCopy,
		}
		return json.Marshal(marshaler)
	case "ListParts":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventListParts
		}{
			Action:           s.Action,
			S3EventListParts: s.ListParts,
		}
		return json.Marshal(marshaler)
	case "ListMultipartUploads":
		var marshaler = struct {
			Action string `json:"action"`
			*S3EventListMultipartUploads
		}{
			Action:                      s.Action,
			S3EventListMultipartUploads: s.ListMultipartUploads,
		}
		return json.Marshal(marshaler)
	}
}

type S3EventVisitor interface {
	VisitListBuckets(*S3EventListBuckets) error
	VisitDeleteBucket(*S3EventDeleteBucket) error
	VisitHeadBucket(*S3EventHeadBucket) error
	VisitCreateBucket(*S3EventCreateBucket) error
	VisitGetBucketAcl(*S3EventGetBucketAcl) error
	VisitGetBucketCors(*S3EventGetBucketCors) error
	VisitGetBucketEncryption(*S3EventGetBucketEncryption) error
	VisitGetBucketLocation(*S3EventGetBucketLocation) error
	VisitGetBucketVersioning(*S3EventGetBucketVersioning) error
	VisitPutBucketAcl(*S3EventPutBucketAcl) error
	VisitPutBucketCors(*S3EventPutBucketCors) error
	VisitPutBucketEncryption(*S3EventPutBucketEncryption) error
	VisitDeleteBucketCors(*S3EventDeleteBucketCors) error
	VisitDeleteBucketEncryption(*S3EventDeleteBucketEncryption) error
	VisitGetObjectLockConfiguration(*S3EventGetObjectLockConfiguration) error
	VisitPutObjectLockConfiguration(*S3EventPutObjectLockConfiguration) error
	VisitListObjectsV2(*S3EventListObjectsV2) error
	VisitHeadObject(*S3EventHeadObject) error
	VisitListObjectVersions(*S3EventListObjectVersions) error
	VisitGetObjectAcl(*S3EventGetObjectAcl) error
	VisitPutObjectAcl(*S3EventPutObjectAcl) error
	VisitGetObjectRetention(*S3EventGetObjectRetention) error
	VisitPutObjectRetention(*S3EventPutObjectRetention) error
	VisitGetObjectLegalHold(*S3EventGetObjectLegalHold) error
	VisitPutObjectLegalHold(*S3EventPutObjectLegalHold) error
	VisitGetObject(*S3EventGetObject) error
	VisitPutObject(*S3EventPutObject) error
	VisitPostObject(*S3EventPostObject) error
	VisitCopyObject(*S3EventCopyObject) error
	VisitDeleteObject(*S3EventDeleteObject) error
	VisitDeleteObjects(*S3EventDeleteObjects) error
	VisitCreateMultipartUpload(*S3EventCreateMultipartUpload) error
	VisitCompleteMultipartUpload(*S3EventCompleteMultipartUpload) error
	VisitAbortMultipartUpload(*S3EventAbortMultipartUpload) error
	VisitUploadPart(*S3EventUploadPart) error
	VisitUploadPartCopy(*S3EventUploadPartCopy) error
	VisitListParts(*S3EventListParts) error
	VisitListMultipartUploads(*S3EventListMultipartUploads) error
}

func (s *S3Event) Accept(visitor S3EventVisitor) error {
	switch s.Action {
	default:
		return fmt.Errorf("invalid type %s in %T", s.Action, s)
	case "ListBuckets":
		return visitor.VisitListBuckets(s.ListBuckets)
	case "DeleteBucket":
		return visitor.VisitDeleteBucket(s.DeleteBucket)
	case "HeadBucket":
		return visitor.VisitHeadBucket(s.HeadBucket)
	case "CreateBucket":
		return visitor.VisitCreateBucket(s.CreateBucket)
	case "GetBucketAcl":
		return visitor.VisitGetBucketAcl(s.GetBucketAcl)
	case "GetBucketCors":
		return visitor.VisitGetBucketCors(s.GetBucketCors)
	case "GetBucketEncryption":
		return visitor.VisitGetBucketEncryption(s.GetBucketEncryption)
	case "GetBucketLocation":
		return visitor.VisitGetBucketLocation(s.GetBucketLocation)
	case "GetBucketVersioning":
		return visitor.VisitGetBucketVersioning(s.GetBucketVersioning)
	case "PutBucketAcl":
		return visitor.VisitPutBucketAcl(s.PutBucketAcl)
	case "PutBucketCors":
		return visitor.VisitPutBucketCors(s.PutBucketCors)
	case "PutBucketEncryption":
		return visitor.VisitPutBucketEncryption(s.PutBucketEncryption)
	case "DeleteBucketCors":
		return visitor.VisitDeleteBucketCors(s.DeleteBucketCors)
	case "DeleteBucketEncryption":
		return visitor.VisitDeleteBucketEncryption(s.DeleteBucketEncryption)
	case "GetObjectLockConfiguration":
		return visitor.VisitGetObjectLockConfiguration(s.GetObjectLockConfiguration)
	case "PutObjectLockConfiguration":
		return visitor.VisitPutObjectLockConfiguration(s.PutObjectLockConfiguration)
	case "ListObjectsV2":
		return visitor.VisitListObjectsV2(s.ListObjectsV2)
	case "HeadObject":
		return visitor.VisitHeadObject(s.HeadObject)
	case "ListObjectVersions":
		return visitor.VisitListObjectVersions(s.ListObjectVersions)
	case "GetObjectAcl":
		return visitor.VisitGetObjectAcl(s.GetObjectAcl)
	case "PutObjectAcl":
		return visitor.VisitPutObjectAcl(s.PutObjectAcl)
	case "GetObjectRetention":
		return visitor.VisitGetObjectRetention(s.GetObjectRetention)
	case "PutObjectRetention":
		return visitor.VisitPutObjectRetention(s.PutObjectRetention)
	case "GetObjectLegalHold":
		return visitor.VisitGetObjectLegalHold(s.GetObjectLegalHold)
	case "PutObjectLegalHold":
		return visitor.VisitPutObjectLegalHold(s.PutObjectLegalHold)
	case "GetObject":
		return visitor.VisitGetObject(s.GetObject)
	case "PutObject":
		return visitor.VisitPutObject(s.PutObject)
	case "PostObject":
		return visitor.VisitPostObject(s.PostObject)
	case "CopyObject":
		return visitor.VisitCopyObject(s.CopyObject)
	case "DeleteObject":
		return visitor.VisitDeleteObject(s.DeleteObject)
	case "DeleteObjects":
		return visitor.VisitDeleteObjects(s.DeleteObjects)
	case "CreateMultipartUpload":
		return visitor.VisitCreateMultipartUpload(s.CreateMultipartUpload)
	case "CompleteMultipartUpload":
		return visitor.VisitCompleteMultipartUpload(s.CompleteMultipartUpload)
	case "AbortMultipartUpload":
		return visitor.VisitAbortMultipartUpload(s.AbortMultipartUpload)
	case "UploadPart":
		return visitor.VisitUploadPart(s.UploadPart)
	case "UploadPartCopy":
		return visitor.VisitUploadPartCopy(s.UploadPartCopy)
	case "ListParts":
		return visitor.VisitListParts(s.ListParts)
	case "ListMultipartUploads":
		return visitor.VisitListMultipartUploads(s.ListMultipartUploads)
	}
}

type S3EventAbortMultipartUpload struct {
	UploadId   string                              `json:"uploadId"`
	Bucket     string                              `json:"bucket"`
	Timestamp  time.Time                           `json:"timestamp"`
	Provider   S3EventAbortMultipartUploadProvider `json:"provider,omitempty"`
	CustomerId *string                             `json:"customerId,omitempty"`
	FeatureId  *string                             `json:"featureId,omitempty"`
	ClientType *string                             `json:"clientType,omitempty"`
	ClientId   *string                             `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventAbortMultipartUpload) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventAbortMultipartUpload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventAbortMultipartUpload(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventAbortMultipartUpload) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventAbortMultipartUploadProvider string

const (
	S3EventAbortMultipartUploadProviderAws       S3EventAbortMultipartUploadProvider = "aws"
	S3EventAbortMultipartUploadProviderBackblaze S3EventAbortMultipartUploadProvider = "backblaze"
	S3EventAbortMultipartUploadProviderWasabi    S3EventAbortMultipartUploadProvider = "wasabi"
)

func NewS3EventAbortMultipartUploadProviderFromString(s string) (S3EventAbortMultipartUploadProvider, error) {
	switch s {
	case "aws":
		return S3EventAbortMultipartUploadProviderAws, nil
	case "backblaze":
		return S3EventAbortMultipartUploadProviderBackblaze, nil
	case "wasabi":
		return S3EventAbortMultipartUploadProviderWasabi, nil
	}
	var t S3EventAbortMultipartUploadProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventAbortMultipartUploadProvider) Ptr() *S3EventAbortMultipartUploadProvider {
	return &s
}

type S3EventCompleteMultipartUpload struct {
	UploadId   string                                 `json:"uploadId"`
	VersionId  *string                                `json:"versionId,omitempty"`
	Bucket     string                                 `json:"bucket"`
	Timestamp  time.Time                              `json:"timestamp"`
	Provider   S3EventCompleteMultipartUploadProvider `json:"provider,omitempty"`
	CustomerId *string                                `json:"customerId,omitempty"`
	FeatureId  *string                                `json:"featureId,omitempty"`
	ClientType *string                                `json:"clientType,omitempty"`
	ClientId   *string                                `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventCompleteMultipartUpload) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventCompleteMultipartUpload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventCompleteMultipartUpload(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventCompleteMultipartUpload) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventCompleteMultipartUploadProvider string

const (
	S3EventCompleteMultipartUploadProviderAws       S3EventCompleteMultipartUploadProvider = "aws"
	S3EventCompleteMultipartUploadProviderBackblaze S3EventCompleteMultipartUploadProvider = "backblaze"
	S3EventCompleteMultipartUploadProviderWasabi    S3EventCompleteMultipartUploadProvider = "wasabi"
)

func NewS3EventCompleteMultipartUploadProviderFromString(s string) (S3EventCompleteMultipartUploadProvider, error) {
	switch s {
	case "aws":
		return S3EventCompleteMultipartUploadProviderAws, nil
	case "backblaze":
		return S3EventCompleteMultipartUploadProviderBackblaze, nil
	case "wasabi":
		return S3EventCompleteMultipartUploadProviderWasabi, nil
	}
	var t S3EventCompleteMultipartUploadProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventCompleteMultipartUploadProvider) Ptr() *S3EventCompleteMultipartUploadProvider {
	return &s
}

type S3EventCopyObject struct {
	VersionId  *string                      `json:"versionId,omitempty"`
	CopySource *S3EventCopyObjectCopySource `json:"copySource,omitempty"`
	ObjectKey  string                       `json:"objectKey"`
	Bucket     string                       `json:"bucket"`
	Timestamp  time.Time                    `json:"timestamp"`
	Provider   S3EventCopyObjectProvider    `json:"provider,omitempty"`
	CustomerId *string                      `json:"customerId,omitempty"`
	FeatureId  *string                      `json:"featureId,omitempty"`
	ClientType *string                      `json:"clientType,omitempty"`
	ClientId   *string                      `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventCopyObject) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventCopyObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventCopyObject(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventCopyObject) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventCopyObjectCopySource struct {
	Bucket    string  `json:"bucket"`
	ObjectKey string  `json:"objectKey"`
	VersionId *string `json:"versionId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventCopyObjectCopySource) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventCopyObjectCopySource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventCopyObjectCopySource(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventCopyObjectCopySource) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventCopyObjectProvider string

const (
	S3EventCopyObjectProviderAws       S3EventCopyObjectProvider = "aws"
	S3EventCopyObjectProviderBackblaze S3EventCopyObjectProvider = "backblaze"
	S3EventCopyObjectProviderWasabi    S3EventCopyObjectProvider = "wasabi"
)

func NewS3EventCopyObjectProviderFromString(s string) (S3EventCopyObjectProvider, error) {
	switch s {
	case "aws":
		return S3EventCopyObjectProviderAws, nil
	case "backblaze":
		return S3EventCopyObjectProviderBackblaze, nil
	case "wasabi":
		return S3EventCopyObjectProviderWasabi, nil
	}
	var t S3EventCopyObjectProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventCopyObjectProvider) Ptr() *S3EventCopyObjectProvider {
	return &s
}

type S3EventCreateBucket struct {
	Bucket     string                      `json:"bucket"`
	Timestamp  time.Time                   `json:"timestamp"`
	Provider   S3EventCreateBucketProvider `json:"provider,omitempty"`
	CustomerId *string                     `json:"customerId,omitempty"`
	FeatureId  *string                     `json:"featureId,omitempty"`
	ClientType *string                     `json:"clientType,omitempty"`
	ClientId   *string                     `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventCreateBucket) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventCreateBucket
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventCreateBucket(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventCreateBucket) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventCreateBucketProvider string

const (
	S3EventCreateBucketProviderAws       S3EventCreateBucketProvider = "aws"
	S3EventCreateBucketProviderBackblaze S3EventCreateBucketProvider = "backblaze"
	S3EventCreateBucketProviderWasabi    S3EventCreateBucketProvider = "wasabi"
)

func NewS3EventCreateBucketProviderFromString(s string) (S3EventCreateBucketProvider, error) {
	switch s {
	case "aws":
		return S3EventCreateBucketProviderAws, nil
	case "backblaze":
		return S3EventCreateBucketProviderBackblaze, nil
	case "wasabi":
		return S3EventCreateBucketProviderWasabi, nil
	}
	var t S3EventCreateBucketProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventCreateBucketProvider) Ptr() *S3EventCreateBucketProvider {
	return &s
}

type S3EventCreateMultipartUpload struct {
	UploadId   string                               `json:"uploadId"`
	ObjectKey  string                               `json:"objectKey"`
	Bucket     string                               `json:"bucket"`
	Timestamp  time.Time                            `json:"timestamp"`
	Provider   S3EventCreateMultipartUploadProvider `json:"provider,omitempty"`
	CustomerId *string                              `json:"customerId,omitempty"`
	FeatureId  *string                              `json:"featureId,omitempty"`
	ClientType *string                              `json:"clientType,omitempty"`
	ClientId   *string                              `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventCreateMultipartUpload) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventCreateMultipartUpload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventCreateMultipartUpload(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventCreateMultipartUpload) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventCreateMultipartUploadProvider string

const (
	S3EventCreateMultipartUploadProviderAws       S3EventCreateMultipartUploadProvider = "aws"
	S3EventCreateMultipartUploadProviderBackblaze S3EventCreateMultipartUploadProvider = "backblaze"
	S3EventCreateMultipartUploadProviderWasabi    S3EventCreateMultipartUploadProvider = "wasabi"
)

func NewS3EventCreateMultipartUploadProviderFromString(s string) (S3EventCreateMultipartUploadProvider, error) {
	switch s {
	case "aws":
		return S3EventCreateMultipartUploadProviderAws, nil
	case "backblaze":
		return S3EventCreateMultipartUploadProviderBackblaze, nil
	case "wasabi":
		return S3EventCreateMultipartUploadProviderWasabi, nil
	}
	var t S3EventCreateMultipartUploadProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventCreateMultipartUploadProvider) Ptr() *S3EventCreateMultipartUploadProvider {
	return &s
}

type S3EventDeleteBucket struct {
	Force      *bool                       `json:"force,omitempty"`
	Bucket     string                      `json:"bucket"`
	Timestamp  time.Time                   `json:"timestamp"`
	Provider   S3EventDeleteBucketProvider `json:"provider,omitempty"`
	CustomerId *string                     `json:"customerId,omitempty"`
	FeatureId  *string                     `json:"featureId,omitempty"`
	ClientType *string                     `json:"clientType,omitempty"`
	ClientId   *string                     `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventDeleteBucket) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventDeleteBucket
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventDeleteBucket(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventDeleteBucket) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventDeleteBucketCors struct {
	Bucket     string                          `json:"bucket"`
	Timestamp  time.Time                       `json:"timestamp"`
	Provider   S3EventDeleteBucketCorsProvider `json:"provider,omitempty"`
	CustomerId *string                         `json:"customerId,omitempty"`
	FeatureId  *string                         `json:"featureId,omitempty"`
	ClientType *string                         `json:"clientType,omitempty"`
	ClientId   *string                         `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventDeleteBucketCors) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventDeleteBucketCors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventDeleteBucketCors(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventDeleteBucketCors) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventDeleteBucketCorsProvider string

const (
	S3EventDeleteBucketCorsProviderAws       S3EventDeleteBucketCorsProvider = "aws"
	S3EventDeleteBucketCorsProviderBackblaze S3EventDeleteBucketCorsProvider = "backblaze"
	S3EventDeleteBucketCorsProviderWasabi    S3EventDeleteBucketCorsProvider = "wasabi"
)

func NewS3EventDeleteBucketCorsProviderFromString(s string) (S3EventDeleteBucketCorsProvider, error) {
	switch s {
	case "aws":
		return S3EventDeleteBucketCorsProviderAws, nil
	case "backblaze":
		return S3EventDeleteBucketCorsProviderBackblaze, nil
	case "wasabi":
		return S3EventDeleteBucketCorsProviderWasabi, nil
	}
	var t S3EventDeleteBucketCorsProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventDeleteBucketCorsProvider) Ptr() *S3EventDeleteBucketCorsProvider {
	return &s
}

type S3EventDeleteBucketEncryption struct {
	Bucket     string                                `json:"bucket"`
	Timestamp  time.Time                             `json:"timestamp"`
	Provider   S3EventDeleteBucketEncryptionProvider `json:"provider,omitempty"`
	CustomerId *string                               `json:"customerId,omitempty"`
	FeatureId  *string                               `json:"featureId,omitempty"`
	ClientType *string                               `json:"clientType,omitempty"`
	ClientId   *string                               `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventDeleteBucketEncryption) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventDeleteBucketEncryption
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventDeleteBucketEncryption(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventDeleteBucketEncryption) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventDeleteBucketEncryptionProvider string

const (
	S3EventDeleteBucketEncryptionProviderAws       S3EventDeleteBucketEncryptionProvider = "aws"
	S3EventDeleteBucketEncryptionProviderBackblaze S3EventDeleteBucketEncryptionProvider = "backblaze"
	S3EventDeleteBucketEncryptionProviderWasabi    S3EventDeleteBucketEncryptionProvider = "wasabi"
)

func NewS3EventDeleteBucketEncryptionProviderFromString(s string) (S3EventDeleteBucketEncryptionProvider, error) {
	switch s {
	case "aws":
		return S3EventDeleteBucketEncryptionProviderAws, nil
	case "backblaze":
		return S3EventDeleteBucketEncryptionProviderBackblaze, nil
	case "wasabi":
		return S3EventDeleteBucketEncryptionProviderWasabi, nil
	}
	var t S3EventDeleteBucketEncryptionProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventDeleteBucketEncryptionProvider) Ptr() *S3EventDeleteBucketEncryptionProvider {
	return &s
}

type S3EventDeleteBucketProvider string

const (
	S3EventDeleteBucketProviderAws       S3EventDeleteBucketProvider = "aws"
	S3EventDeleteBucketProviderBackblaze S3EventDeleteBucketProvider = "backblaze"
	S3EventDeleteBucketProviderWasabi    S3EventDeleteBucketProvider = "wasabi"
)

func NewS3EventDeleteBucketProviderFromString(s string) (S3EventDeleteBucketProvider, error) {
	switch s {
	case "aws":
		return S3EventDeleteBucketProviderAws, nil
	case "backblaze":
		return S3EventDeleteBucketProviderBackblaze, nil
	case "wasabi":
		return S3EventDeleteBucketProviderWasabi, nil
	}
	var t S3EventDeleteBucketProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventDeleteBucketProvider) Ptr() *S3EventDeleteBucketProvider {
	return &s
}

type S3EventDeleteObject struct {
	VersionId      *string                     `json:"versionId,omitempty"`
	IsDeleteMarker *bool                       `json:"isDeleteMarker,omitempty"`
	ObjectKey      string                      `json:"objectKey"`
	Bucket         string                      `json:"bucket"`
	Timestamp      time.Time                   `json:"timestamp"`
	Provider       S3EventDeleteObjectProvider `json:"provider,omitempty"`
	CustomerId     *string                     `json:"customerId,omitempty"`
	FeatureId      *string                     `json:"featureId,omitempty"`
	ClientType     *string                     `json:"clientType,omitempty"`
	ClientId       *string                     `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventDeleteObject) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventDeleteObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventDeleteObject(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventDeleteObject) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventDeleteObjectProvider string

const (
	S3EventDeleteObjectProviderAws       S3EventDeleteObjectProvider = "aws"
	S3EventDeleteObjectProviderBackblaze S3EventDeleteObjectProvider = "backblaze"
	S3EventDeleteObjectProviderWasabi    S3EventDeleteObjectProvider = "wasabi"
)

func NewS3EventDeleteObjectProviderFromString(s string) (S3EventDeleteObjectProvider, error) {
	switch s {
	case "aws":
		return S3EventDeleteObjectProviderAws, nil
	case "backblaze":
		return S3EventDeleteObjectProviderBackblaze, nil
	case "wasabi":
		return S3EventDeleteObjectProviderWasabi, nil
	}
	var t S3EventDeleteObjectProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventDeleteObjectProvider) Ptr() *S3EventDeleteObjectProvider {
	return &s
}

type S3EventDeleteObjects struct {
	DeletedObjects []*S3EventDeleteObjectsDeletedObjectsItem `json:"deletedObjects,omitempty"`
	Bucket         string                                    `json:"bucket"`
	Timestamp      time.Time                                 `json:"timestamp"`
	Provider       S3EventDeleteObjectsProvider              `json:"provider,omitempty"`
	CustomerId     *string                                   `json:"customerId,omitempty"`
	FeatureId      *string                                   `json:"featureId,omitempty"`
	ClientType     *string                                   `json:"clientType,omitempty"`
	ClientId       *string                                   `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventDeleteObjects) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventDeleteObjects
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventDeleteObjects(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventDeleteObjects) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventDeleteObjectsDeletedObjectsItem struct {
	ObjectKey      string  `json:"objectKey"`
	VersionId      *string `json:"versionId,omitempty"`
	IsDeleteMarker *bool   `json:"isDeleteMarker,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventDeleteObjectsDeletedObjectsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventDeleteObjectsDeletedObjectsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventDeleteObjectsDeletedObjectsItem(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventDeleteObjectsDeletedObjectsItem) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventDeleteObjectsProvider string

const (
	S3EventDeleteObjectsProviderAws       S3EventDeleteObjectsProvider = "aws"
	S3EventDeleteObjectsProviderBackblaze S3EventDeleteObjectsProvider = "backblaze"
	S3EventDeleteObjectsProviderWasabi    S3EventDeleteObjectsProvider = "wasabi"
)

func NewS3EventDeleteObjectsProviderFromString(s string) (S3EventDeleteObjectsProvider, error) {
	switch s {
	case "aws":
		return S3EventDeleteObjectsProviderAws, nil
	case "backblaze":
		return S3EventDeleteObjectsProviderBackblaze, nil
	case "wasabi":
		return S3EventDeleteObjectsProviderWasabi, nil
	}
	var t S3EventDeleteObjectsProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventDeleteObjectsProvider) Ptr() *S3EventDeleteObjectsProvider {
	return &s
}

type S3EventGetBucketAcl struct {
	Bucket     string                      `json:"bucket"`
	Timestamp  time.Time                   `json:"timestamp"`
	Provider   S3EventGetBucketAclProvider `json:"provider,omitempty"`
	CustomerId *string                     `json:"customerId,omitempty"`
	FeatureId  *string                     `json:"featureId,omitempty"`
	ClientType *string                     `json:"clientType,omitempty"`
	ClientId   *string                     `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventGetBucketAcl) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventGetBucketAcl
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventGetBucketAcl(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventGetBucketAcl) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventGetBucketAclProvider string

const (
	S3EventGetBucketAclProviderAws       S3EventGetBucketAclProvider = "aws"
	S3EventGetBucketAclProviderBackblaze S3EventGetBucketAclProvider = "backblaze"
	S3EventGetBucketAclProviderWasabi    S3EventGetBucketAclProvider = "wasabi"
)

func NewS3EventGetBucketAclProviderFromString(s string) (S3EventGetBucketAclProvider, error) {
	switch s {
	case "aws":
		return S3EventGetBucketAclProviderAws, nil
	case "backblaze":
		return S3EventGetBucketAclProviderBackblaze, nil
	case "wasabi":
		return S3EventGetBucketAclProviderWasabi, nil
	}
	var t S3EventGetBucketAclProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventGetBucketAclProvider) Ptr() *S3EventGetBucketAclProvider {
	return &s
}

type S3EventGetBucketCors struct {
	Bucket     string                       `json:"bucket"`
	Timestamp  time.Time                    `json:"timestamp"`
	Provider   S3EventGetBucketCorsProvider `json:"provider,omitempty"`
	CustomerId *string                      `json:"customerId,omitempty"`
	FeatureId  *string                      `json:"featureId,omitempty"`
	ClientType *string                      `json:"clientType,omitempty"`
	ClientId   *string                      `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventGetBucketCors) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventGetBucketCors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventGetBucketCors(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventGetBucketCors) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventGetBucketCorsProvider string

const (
	S3EventGetBucketCorsProviderAws       S3EventGetBucketCorsProvider = "aws"
	S3EventGetBucketCorsProviderBackblaze S3EventGetBucketCorsProvider = "backblaze"
	S3EventGetBucketCorsProviderWasabi    S3EventGetBucketCorsProvider = "wasabi"
)

func NewS3EventGetBucketCorsProviderFromString(s string) (S3EventGetBucketCorsProvider, error) {
	switch s {
	case "aws":
		return S3EventGetBucketCorsProviderAws, nil
	case "backblaze":
		return S3EventGetBucketCorsProviderBackblaze, nil
	case "wasabi":
		return S3EventGetBucketCorsProviderWasabi, nil
	}
	var t S3EventGetBucketCorsProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventGetBucketCorsProvider) Ptr() *S3EventGetBucketCorsProvider {
	return &s
}

type S3EventGetBucketEncryption struct {
	Bucket     string                             `json:"bucket"`
	Timestamp  time.Time                          `json:"timestamp"`
	Provider   S3EventGetBucketEncryptionProvider `json:"provider,omitempty"`
	CustomerId *string                            `json:"customerId,omitempty"`
	FeatureId  *string                            `json:"featureId,omitempty"`
	ClientType *string                            `json:"clientType,omitempty"`
	ClientId   *string                            `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventGetBucketEncryption) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventGetBucketEncryption
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventGetBucketEncryption(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventGetBucketEncryption) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventGetBucketEncryptionProvider string

const (
	S3EventGetBucketEncryptionProviderAws       S3EventGetBucketEncryptionProvider = "aws"
	S3EventGetBucketEncryptionProviderBackblaze S3EventGetBucketEncryptionProvider = "backblaze"
	S3EventGetBucketEncryptionProviderWasabi    S3EventGetBucketEncryptionProvider = "wasabi"
)

func NewS3EventGetBucketEncryptionProviderFromString(s string) (S3EventGetBucketEncryptionProvider, error) {
	switch s {
	case "aws":
		return S3EventGetBucketEncryptionProviderAws, nil
	case "backblaze":
		return S3EventGetBucketEncryptionProviderBackblaze, nil
	case "wasabi":
		return S3EventGetBucketEncryptionProviderWasabi, nil
	}
	var t S3EventGetBucketEncryptionProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventGetBucketEncryptionProvider) Ptr() *S3EventGetBucketEncryptionProvider {
	return &s
}

type S3EventGetBucketLocation struct {
	Bucket     string                           `json:"bucket"`
	Timestamp  time.Time                        `json:"timestamp"`
	Provider   S3EventGetBucketLocationProvider `json:"provider,omitempty"`
	CustomerId *string                          `json:"customerId,omitempty"`
	FeatureId  *string                          `json:"featureId,omitempty"`
	ClientType *string                          `json:"clientType,omitempty"`
	ClientId   *string                          `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventGetBucketLocation) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventGetBucketLocation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventGetBucketLocation(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventGetBucketLocation) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventGetBucketLocationProvider string

const (
	S3EventGetBucketLocationProviderAws       S3EventGetBucketLocationProvider = "aws"
	S3EventGetBucketLocationProviderBackblaze S3EventGetBucketLocationProvider = "backblaze"
	S3EventGetBucketLocationProviderWasabi    S3EventGetBucketLocationProvider = "wasabi"
)

func NewS3EventGetBucketLocationProviderFromString(s string) (S3EventGetBucketLocationProvider, error) {
	switch s {
	case "aws":
		return S3EventGetBucketLocationProviderAws, nil
	case "backblaze":
		return S3EventGetBucketLocationProviderBackblaze, nil
	case "wasabi":
		return S3EventGetBucketLocationProviderWasabi, nil
	}
	var t S3EventGetBucketLocationProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventGetBucketLocationProvider) Ptr() *S3EventGetBucketLocationProvider {
	return &s
}

type S3EventGetBucketVersioning struct {
	Bucket     string                             `json:"bucket"`
	Timestamp  time.Time                          `json:"timestamp"`
	Provider   S3EventGetBucketVersioningProvider `json:"provider,omitempty"`
	CustomerId *string                            `json:"customerId,omitempty"`
	FeatureId  *string                            `json:"featureId,omitempty"`
	ClientType *string                            `json:"clientType,omitempty"`
	ClientId   *string                            `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventGetBucketVersioning) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventGetBucketVersioning
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventGetBucketVersioning(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventGetBucketVersioning) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventGetBucketVersioningProvider string

const (
	S3EventGetBucketVersioningProviderAws       S3EventGetBucketVersioningProvider = "aws"
	S3EventGetBucketVersioningProviderBackblaze S3EventGetBucketVersioningProvider = "backblaze"
	S3EventGetBucketVersioningProviderWasabi    S3EventGetBucketVersioningProvider = "wasabi"
)

func NewS3EventGetBucketVersioningProviderFromString(s string) (S3EventGetBucketVersioningProvider, error) {
	switch s {
	case "aws":
		return S3EventGetBucketVersioningProviderAws, nil
	case "backblaze":
		return S3EventGetBucketVersioningProviderBackblaze, nil
	case "wasabi":
		return S3EventGetBucketVersioningProviderWasabi, nil
	}
	var t S3EventGetBucketVersioningProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventGetBucketVersioningProvider) Ptr() *S3EventGetBucketVersioningProvider {
	return &s
}

type S3EventGetObject struct {
	Bytes      int                      `json:"bytes"`
	VersionId  *string                  `json:"versionId,omitempty"`
	ObjectKey  string                   `json:"objectKey"`
	Bucket     string                   `json:"bucket"`
	Timestamp  time.Time                `json:"timestamp"`
	Provider   S3EventGetObjectProvider `json:"provider,omitempty"`
	CustomerId *string                  `json:"customerId,omitempty"`
	FeatureId  *string                  `json:"featureId,omitempty"`
	ClientType *string                  `json:"clientType,omitempty"`
	ClientId   *string                  `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventGetObject) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventGetObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventGetObject(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventGetObject) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventGetObjectAcl struct {
	ObjectKey  string                      `json:"objectKey"`
	Bucket     string                      `json:"bucket"`
	Timestamp  time.Time                   `json:"timestamp"`
	Provider   S3EventGetObjectAclProvider `json:"provider,omitempty"`
	CustomerId *string                     `json:"customerId,omitempty"`
	FeatureId  *string                     `json:"featureId,omitempty"`
	ClientType *string                     `json:"clientType,omitempty"`
	ClientId   *string                     `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventGetObjectAcl) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventGetObjectAcl
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventGetObjectAcl(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventGetObjectAcl) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventGetObjectAclProvider string

const (
	S3EventGetObjectAclProviderAws       S3EventGetObjectAclProvider = "aws"
	S3EventGetObjectAclProviderBackblaze S3EventGetObjectAclProvider = "backblaze"
	S3EventGetObjectAclProviderWasabi    S3EventGetObjectAclProvider = "wasabi"
)

func NewS3EventGetObjectAclProviderFromString(s string) (S3EventGetObjectAclProvider, error) {
	switch s {
	case "aws":
		return S3EventGetObjectAclProviderAws, nil
	case "backblaze":
		return S3EventGetObjectAclProviderBackblaze, nil
	case "wasabi":
		return S3EventGetObjectAclProviderWasabi, nil
	}
	var t S3EventGetObjectAclProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventGetObjectAclProvider) Ptr() *S3EventGetObjectAclProvider {
	return &s
}

type S3EventGetObjectLegalHold struct {
	ObjectKey  string                            `json:"objectKey"`
	Bucket     string                            `json:"bucket"`
	Timestamp  time.Time                         `json:"timestamp"`
	Provider   S3EventGetObjectLegalHoldProvider `json:"provider,omitempty"`
	CustomerId *string                           `json:"customerId,omitempty"`
	FeatureId  *string                           `json:"featureId,omitempty"`
	ClientType *string                           `json:"clientType,omitempty"`
	ClientId   *string                           `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventGetObjectLegalHold) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventGetObjectLegalHold
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventGetObjectLegalHold(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventGetObjectLegalHold) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventGetObjectLegalHoldProvider string

const (
	S3EventGetObjectLegalHoldProviderAws       S3EventGetObjectLegalHoldProvider = "aws"
	S3EventGetObjectLegalHoldProviderBackblaze S3EventGetObjectLegalHoldProvider = "backblaze"
	S3EventGetObjectLegalHoldProviderWasabi    S3EventGetObjectLegalHoldProvider = "wasabi"
)

func NewS3EventGetObjectLegalHoldProviderFromString(s string) (S3EventGetObjectLegalHoldProvider, error) {
	switch s {
	case "aws":
		return S3EventGetObjectLegalHoldProviderAws, nil
	case "backblaze":
		return S3EventGetObjectLegalHoldProviderBackblaze, nil
	case "wasabi":
		return S3EventGetObjectLegalHoldProviderWasabi, nil
	}
	var t S3EventGetObjectLegalHoldProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventGetObjectLegalHoldProvider) Ptr() *S3EventGetObjectLegalHoldProvider {
	return &s
}

type S3EventGetObjectLockConfiguration struct {
	Bucket     string                                    `json:"bucket"`
	Timestamp  time.Time                                 `json:"timestamp"`
	Provider   S3EventGetObjectLockConfigurationProvider `json:"provider,omitempty"`
	CustomerId *string                                   `json:"customerId,omitempty"`
	FeatureId  *string                                   `json:"featureId,omitempty"`
	ClientType *string                                   `json:"clientType,omitempty"`
	ClientId   *string                                   `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventGetObjectLockConfiguration) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventGetObjectLockConfiguration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventGetObjectLockConfiguration(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventGetObjectLockConfiguration) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventGetObjectLockConfigurationProvider string

const (
	S3EventGetObjectLockConfigurationProviderAws       S3EventGetObjectLockConfigurationProvider = "aws"
	S3EventGetObjectLockConfigurationProviderBackblaze S3EventGetObjectLockConfigurationProvider = "backblaze"
	S3EventGetObjectLockConfigurationProviderWasabi    S3EventGetObjectLockConfigurationProvider = "wasabi"
)

func NewS3EventGetObjectLockConfigurationProviderFromString(s string) (S3EventGetObjectLockConfigurationProvider, error) {
	switch s {
	case "aws":
		return S3EventGetObjectLockConfigurationProviderAws, nil
	case "backblaze":
		return S3EventGetObjectLockConfigurationProviderBackblaze, nil
	case "wasabi":
		return S3EventGetObjectLockConfigurationProviderWasabi, nil
	}
	var t S3EventGetObjectLockConfigurationProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventGetObjectLockConfigurationProvider) Ptr() *S3EventGetObjectLockConfigurationProvider {
	return &s
}

type S3EventGetObjectProvider string

const (
	S3EventGetObjectProviderAws       S3EventGetObjectProvider = "aws"
	S3EventGetObjectProviderBackblaze S3EventGetObjectProvider = "backblaze"
	S3EventGetObjectProviderWasabi    S3EventGetObjectProvider = "wasabi"
)

func NewS3EventGetObjectProviderFromString(s string) (S3EventGetObjectProvider, error) {
	switch s {
	case "aws":
		return S3EventGetObjectProviderAws, nil
	case "backblaze":
		return S3EventGetObjectProviderBackblaze, nil
	case "wasabi":
		return S3EventGetObjectProviderWasabi, nil
	}
	var t S3EventGetObjectProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventGetObjectProvider) Ptr() *S3EventGetObjectProvider {
	return &s
}

type S3EventGetObjectRetention struct {
	ObjectKey  string                            `json:"objectKey"`
	Bucket     string                            `json:"bucket"`
	Timestamp  time.Time                         `json:"timestamp"`
	Provider   S3EventGetObjectRetentionProvider `json:"provider,omitempty"`
	CustomerId *string                           `json:"customerId,omitempty"`
	FeatureId  *string                           `json:"featureId,omitempty"`
	ClientType *string                           `json:"clientType,omitempty"`
	ClientId   *string                           `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventGetObjectRetention) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventGetObjectRetention
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventGetObjectRetention(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventGetObjectRetention) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventGetObjectRetentionProvider string

const (
	S3EventGetObjectRetentionProviderAws       S3EventGetObjectRetentionProvider = "aws"
	S3EventGetObjectRetentionProviderBackblaze S3EventGetObjectRetentionProvider = "backblaze"
	S3EventGetObjectRetentionProviderWasabi    S3EventGetObjectRetentionProvider = "wasabi"
)

func NewS3EventGetObjectRetentionProviderFromString(s string) (S3EventGetObjectRetentionProvider, error) {
	switch s {
	case "aws":
		return S3EventGetObjectRetentionProviderAws, nil
	case "backblaze":
		return S3EventGetObjectRetentionProviderBackblaze, nil
	case "wasabi":
		return S3EventGetObjectRetentionProviderWasabi, nil
	}
	var t S3EventGetObjectRetentionProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventGetObjectRetentionProvider) Ptr() *S3EventGetObjectRetentionProvider {
	return &s
}

type S3EventHeadBucket struct {
	Bucket     string                    `json:"bucket"`
	Timestamp  time.Time                 `json:"timestamp"`
	Provider   S3EventHeadBucketProvider `json:"provider,omitempty"`
	CustomerId *string                   `json:"customerId,omitempty"`
	FeatureId  *string                   `json:"featureId,omitempty"`
	ClientType *string                   `json:"clientType,omitempty"`
	ClientId   *string                   `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventHeadBucket) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventHeadBucket
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventHeadBucket(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventHeadBucket) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventHeadBucketProvider string

const (
	S3EventHeadBucketProviderAws       S3EventHeadBucketProvider = "aws"
	S3EventHeadBucketProviderBackblaze S3EventHeadBucketProvider = "backblaze"
	S3EventHeadBucketProviderWasabi    S3EventHeadBucketProvider = "wasabi"
)

func NewS3EventHeadBucketProviderFromString(s string) (S3EventHeadBucketProvider, error) {
	switch s {
	case "aws":
		return S3EventHeadBucketProviderAws, nil
	case "backblaze":
		return S3EventHeadBucketProviderBackblaze, nil
	case "wasabi":
		return S3EventHeadBucketProviderWasabi, nil
	}
	var t S3EventHeadBucketProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventHeadBucketProvider) Ptr() *S3EventHeadBucketProvider {
	return &s
}

type S3EventHeadObject struct {
	ObjectKey  string                    `json:"objectKey"`
	Bucket     string                    `json:"bucket"`
	Timestamp  time.Time                 `json:"timestamp"`
	Provider   S3EventHeadObjectProvider `json:"provider,omitempty"`
	CustomerId *string                   `json:"customerId,omitempty"`
	FeatureId  *string                   `json:"featureId,omitempty"`
	ClientType *string                   `json:"clientType,omitempty"`
	ClientId   *string                   `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventHeadObject) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventHeadObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventHeadObject(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventHeadObject) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventHeadObjectProvider string

const (
	S3EventHeadObjectProviderAws       S3EventHeadObjectProvider = "aws"
	S3EventHeadObjectProviderBackblaze S3EventHeadObjectProvider = "backblaze"
	S3EventHeadObjectProviderWasabi    S3EventHeadObjectProvider = "wasabi"
)

func NewS3EventHeadObjectProviderFromString(s string) (S3EventHeadObjectProvider, error) {
	switch s {
	case "aws":
		return S3EventHeadObjectProviderAws, nil
	case "backblaze":
		return S3EventHeadObjectProviderBackblaze, nil
	case "wasabi":
		return S3EventHeadObjectProviderWasabi, nil
	}
	var t S3EventHeadObjectProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventHeadObjectProvider) Ptr() *S3EventHeadObjectProvider {
	return &s
}

type S3EventListBuckets struct {
	Timestamp  time.Time                  `json:"timestamp"`
	Provider   S3EventListBucketsProvider `json:"provider,omitempty"`
	CustomerId *string                    `json:"customerId,omitempty"`
	FeatureId  *string                    `json:"featureId,omitempty"`
	ClientType *string                    `json:"clientType,omitempty"`
	ClientId   *string                    `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventListBuckets) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventListBuckets
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventListBuckets(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventListBuckets) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventListBucketsProvider string

const (
	S3EventListBucketsProviderAws       S3EventListBucketsProvider = "aws"
	S3EventListBucketsProviderBackblaze S3EventListBucketsProvider = "backblaze"
	S3EventListBucketsProviderWasabi    S3EventListBucketsProvider = "wasabi"
)

func NewS3EventListBucketsProviderFromString(s string) (S3EventListBucketsProvider, error) {
	switch s {
	case "aws":
		return S3EventListBucketsProviderAws, nil
	case "backblaze":
		return S3EventListBucketsProviderBackblaze, nil
	case "wasabi":
		return S3EventListBucketsProviderWasabi, nil
	}
	var t S3EventListBucketsProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventListBucketsProvider) Ptr() *S3EventListBucketsProvider {
	return &s
}

type S3EventListMultipartUploads struct {
	Bucket     string                              `json:"bucket"`
	Timestamp  time.Time                           `json:"timestamp"`
	Provider   S3EventListMultipartUploadsProvider `json:"provider,omitempty"`
	CustomerId *string                             `json:"customerId,omitempty"`
	FeatureId  *string                             `json:"featureId,omitempty"`
	ClientType *string                             `json:"clientType,omitempty"`
	ClientId   *string                             `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventListMultipartUploads) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventListMultipartUploads
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventListMultipartUploads(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventListMultipartUploads) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventListMultipartUploadsProvider string

const (
	S3EventListMultipartUploadsProviderAws       S3EventListMultipartUploadsProvider = "aws"
	S3EventListMultipartUploadsProviderBackblaze S3EventListMultipartUploadsProvider = "backblaze"
	S3EventListMultipartUploadsProviderWasabi    S3EventListMultipartUploadsProvider = "wasabi"
)

func NewS3EventListMultipartUploadsProviderFromString(s string) (S3EventListMultipartUploadsProvider, error) {
	switch s {
	case "aws":
		return S3EventListMultipartUploadsProviderAws, nil
	case "backblaze":
		return S3EventListMultipartUploadsProviderBackblaze, nil
	case "wasabi":
		return S3EventListMultipartUploadsProviderWasabi, nil
	}
	var t S3EventListMultipartUploadsProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventListMultipartUploadsProvider) Ptr() *S3EventListMultipartUploadsProvider {
	return &s
}

type S3EventListObjectVersions struct {
	ObjectKey  string                            `json:"objectKey"`
	Bucket     string                            `json:"bucket"`
	Timestamp  time.Time                         `json:"timestamp"`
	Provider   S3EventListObjectVersionsProvider `json:"provider,omitempty"`
	CustomerId *string                           `json:"customerId,omitempty"`
	FeatureId  *string                           `json:"featureId,omitempty"`
	ClientType *string                           `json:"clientType,omitempty"`
	ClientId   *string                           `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventListObjectVersions) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventListObjectVersions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventListObjectVersions(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventListObjectVersions) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventListObjectVersionsProvider string

const (
	S3EventListObjectVersionsProviderAws       S3EventListObjectVersionsProvider = "aws"
	S3EventListObjectVersionsProviderBackblaze S3EventListObjectVersionsProvider = "backblaze"
	S3EventListObjectVersionsProviderWasabi    S3EventListObjectVersionsProvider = "wasabi"
)

func NewS3EventListObjectVersionsProviderFromString(s string) (S3EventListObjectVersionsProvider, error) {
	switch s {
	case "aws":
		return S3EventListObjectVersionsProviderAws, nil
	case "backblaze":
		return S3EventListObjectVersionsProviderBackblaze, nil
	case "wasabi":
		return S3EventListObjectVersionsProviderWasabi, nil
	}
	var t S3EventListObjectVersionsProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventListObjectVersionsProvider) Ptr() *S3EventListObjectVersionsProvider {
	return &s
}

type S3EventListObjectsV2 struct {
	Bucket     string                       `json:"bucket"`
	Timestamp  time.Time                    `json:"timestamp"`
	Provider   S3EventListObjectsV2Provider `json:"provider,omitempty"`
	CustomerId *string                      `json:"customerId,omitempty"`
	FeatureId  *string                      `json:"featureId,omitempty"`
	ClientType *string                      `json:"clientType,omitempty"`
	ClientId   *string                      `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventListObjectsV2) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventListObjectsV2
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventListObjectsV2(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventListObjectsV2) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventListObjectsV2Provider string

const (
	S3EventListObjectsV2ProviderAws       S3EventListObjectsV2Provider = "aws"
	S3EventListObjectsV2ProviderBackblaze S3EventListObjectsV2Provider = "backblaze"
	S3EventListObjectsV2ProviderWasabi    S3EventListObjectsV2Provider = "wasabi"
)

func NewS3EventListObjectsV2ProviderFromString(s string) (S3EventListObjectsV2Provider, error) {
	switch s {
	case "aws":
		return S3EventListObjectsV2ProviderAws, nil
	case "backblaze":
		return S3EventListObjectsV2ProviderBackblaze, nil
	case "wasabi":
		return S3EventListObjectsV2ProviderWasabi, nil
	}
	var t S3EventListObjectsV2Provider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventListObjectsV2Provider) Ptr() *S3EventListObjectsV2Provider {
	return &s
}

type S3EventListParts struct {
	UploadId   string                   `json:"uploadId"`
	Bucket     string                   `json:"bucket"`
	Timestamp  time.Time                `json:"timestamp"`
	Provider   S3EventListPartsProvider `json:"provider,omitempty"`
	CustomerId *string                  `json:"customerId,omitempty"`
	FeatureId  *string                  `json:"featureId,omitempty"`
	ClientType *string                  `json:"clientType,omitempty"`
	ClientId   *string                  `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventListParts) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventListParts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventListParts(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventListParts) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventListPartsProvider string

const (
	S3EventListPartsProviderAws       S3EventListPartsProvider = "aws"
	S3EventListPartsProviderBackblaze S3EventListPartsProvider = "backblaze"
	S3EventListPartsProviderWasabi    S3EventListPartsProvider = "wasabi"
)

func NewS3EventListPartsProviderFromString(s string) (S3EventListPartsProvider, error) {
	switch s {
	case "aws":
		return S3EventListPartsProviderAws, nil
	case "backblaze":
		return S3EventListPartsProviderBackblaze, nil
	case "wasabi":
		return S3EventListPartsProviderWasabi, nil
	}
	var t S3EventListPartsProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventListPartsProvider) Ptr() *S3EventListPartsProvider {
	return &s
}

type S3EventPostObject struct {
	Bytes          int                       `json:"bytes"`
	VersionId      *string                   `json:"versionId,omitempty"`
	ObjectCategory *string                   `json:"objectCategory,omitempty"`
	FileType       *string                   `json:"fileType,omitempty"`
	IsSynthetic    *bool                     `json:"isSynthetic,omitempty"`
	ObjectKey      string                    `json:"objectKey"`
	Bucket         string                    `json:"bucket"`
	Timestamp      time.Time                 `json:"timestamp"`
	Provider       S3EventPostObjectProvider `json:"provider,omitempty"`
	CustomerId     *string                   `json:"customerId,omitempty"`
	FeatureId      *string                   `json:"featureId,omitempty"`
	ClientType     *string                   `json:"clientType,omitempty"`
	ClientId       *string                   `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventPostObject) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventPostObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventPostObject(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventPostObject) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventPostObjectProvider string

const (
	S3EventPostObjectProviderAws       S3EventPostObjectProvider = "aws"
	S3EventPostObjectProviderBackblaze S3EventPostObjectProvider = "backblaze"
	S3EventPostObjectProviderWasabi    S3EventPostObjectProvider = "wasabi"
)

func NewS3EventPostObjectProviderFromString(s string) (S3EventPostObjectProvider, error) {
	switch s {
	case "aws":
		return S3EventPostObjectProviderAws, nil
	case "backblaze":
		return S3EventPostObjectProviderBackblaze, nil
	case "wasabi":
		return S3EventPostObjectProviderWasabi, nil
	}
	var t S3EventPostObjectProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventPostObjectProvider) Ptr() *S3EventPostObjectProvider {
	return &s
}

type S3EventPutBucketAcl struct {
	Bucket     string                      `json:"bucket"`
	Timestamp  time.Time                   `json:"timestamp"`
	Provider   S3EventPutBucketAclProvider `json:"provider,omitempty"`
	CustomerId *string                     `json:"customerId,omitempty"`
	FeatureId  *string                     `json:"featureId,omitempty"`
	ClientType *string                     `json:"clientType,omitempty"`
	ClientId   *string                     `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventPutBucketAcl) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventPutBucketAcl
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventPutBucketAcl(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventPutBucketAcl) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventPutBucketAclProvider string

const (
	S3EventPutBucketAclProviderAws       S3EventPutBucketAclProvider = "aws"
	S3EventPutBucketAclProviderBackblaze S3EventPutBucketAclProvider = "backblaze"
	S3EventPutBucketAclProviderWasabi    S3EventPutBucketAclProvider = "wasabi"
)

func NewS3EventPutBucketAclProviderFromString(s string) (S3EventPutBucketAclProvider, error) {
	switch s {
	case "aws":
		return S3EventPutBucketAclProviderAws, nil
	case "backblaze":
		return S3EventPutBucketAclProviderBackblaze, nil
	case "wasabi":
		return S3EventPutBucketAclProviderWasabi, nil
	}
	var t S3EventPutBucketAclProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventPutBucketAclProvider) Ptr() *S3EventPutBucketAclProvider {
	return &s
}

type S3EventPutBucketCors struct {
	Bucket     string                       `json:"bucket"`
	Timestamp  time.Time                    `json:"timestamp"`
	Provider   S3EventPutBucketCorsProvider `json:"provider,omitempty"`
	CustomerId *string                      `json:"customerId,omitempty"`
	FeatureId  *string                      `json:"featureId,omitempty"`
	ClientType *string                      `json:"clientType,omitempty"`
	ClientId   *string                      `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventPutBucketCors) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventPutBucketCors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventPutBucketCors(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventPutBucketCors) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventPutBucketCorsProvider string

const (
	S3EventPutBucketCorsProviderAws       S3EventPutBucketCorsProvider = "aws"
	S3EventPutBucketCorsProviderBackblaze S3EventPutBucketCorsProvider = "backblaze"
	S3EventPutBucketCorsProviderWasabi    S3EventPutBucketCorsProvider = "wasabi"
)

func NewS3EventPutBucketCorsProviderFromString(s string) (S3EventPutBucketCorsProvider, error) {
	switch s {
	case "aws":
		return S3EventPutBucketCorsProviderAws, nil
	case "backblaze":
		return S3EventPutBucketCorsProviderBackblaze, nil
	case "wasabi":
		return S3EventPutBucketCorsProviderWasabi, nil
	}
	var t S3EventPutBucketCorsProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventPutBucketCorsProvider) Ptr() *S3EventPutBucketCorsProvider {
	return &s
}

type S3EventPutBucketEncryption struct {
	Bucket     string                             `json:"bucket"`
	Timestamp  time.Time                          `json:"timestamp"`
	Provider   S3EventPutBucketEncryptionProvider `json:"provider,omitempty"`
	CustomerId *string                            `json:"customerId,omitempty"`
	FeatureId  *string                            `json:"featureId,omitempty"`
	ClientType *string                            `json:"clientType,omitempty"`
	ClientId   *string                            `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventPutBucketEncryption) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventPutBucketEncryption
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventPutBucketEncryption(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventPutBucketEncryption) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventPutBucketEncryptionProvider string

const (
	S3EventPutBucketEncryptionProviderAws       S3EventPutBucketEncryptionProvider = "aws"
	S3EventPutBucketEncryptionProviderBackblaze S3EventPutBucketEncryptionProvider = "backblaze"
	S3EventPutBucketEncryptionProviderWasabi    S3EventPutBucketEncryptionProvider = "wasabi"
)

func NewS3EventPutBucketEncryptionProviderFromString(s string) (S3EventPutBucketEncryptionProvider, error) {
	switch s {
	case "aws":
		return S3EventPutBucketEncryptionProviderAws, nil
	case "backblaze":
		return S3EventPutBucketEncryptionProviderBackblaze, nil
	case "wasabi":
		return S3EventPutBucketEncryptionProviderWasabi, nil
	}
	var t S3EventPutBucketEncryptionProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventPutBucketEncryptionProvider) Ptr() *S3EventPutBucketEncryptionProvider {
	return &s
}

type S3EventPutObject struct {
	Bytes          int                      `json:"bytes"`
	VersionId      *string                  `json:"versionId,omitempty"`
	ObjectCategory *string                  `json:"objectCategory,omitempty"`
	FileType       *string                  `json:"fileType,omitempty"`
	IsSynthetic    *bool                    `json:"isSynthetic,omitempty"`
	ObjectKey      string                   `json:"objectKey"`
	Bucket         string                   `json:"bucket"`
	Timestamp      time.Time                `json:"timestamp"`
	Provider       S3EventPutObjectProvider `json:"provider,omitempty"`
	CustomerId     *string                  `json:"customerId,omitempty"`
	FeatureId      *string                  `json:"featureId,omitempty"`
	ClientType     *string                  `json:"clientType,omitempty"`
	ClientId       *string                  `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventPutObject) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventPutObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventPutObject(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventPutObject) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventPutObjectAcl struct {
	ObjectKey  string                      `json:"objectKey"`
	Bucket     string                      `json:"bucket"`
	Timestamp  time.Time                   `json:"timestamp"`
	Provider   S3EventPutObjectAclProvider `json:"provider,omitempty"`
	CustomerId *string                     `json:"customerId,omitempty"`
	FeatureId  *string                     `json:"featureId,omitempty"`
	ClientType *string                     `json:"clientType,omitempty"`
	ClientId   *string                     `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventPutObjectAcl) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventPutObjectAcl
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventPutObjectAcl(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventPutObjectAcl) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventPutObjectAclProvider string

const (
	S3EventPutObjectAclProviderAws       S3EventPutObjectAclProvider = "aws"
	S3EventPutObjectAclProviderBackblaze S3EventPutObjectAclProvider = "backblaze"
	S3EventPutObjectAclProviderWasabi    S3EventPutObjectAclProvider = "wasabi"
)

func NewS3EventPutObjectAclProviderFromString(s string) (S3EventPutObjectAclProvider, error) {
	switch s {
	case "aws":
		return S3EventPutObjectAclProviderAws, nil
	case "backblaze":
		return S3EventPutObjectAclProviderBackblaze, nil
	case "wasabi":
		return S3EventPutObjectAclProviderWasabi, nil
	}
	var t S3EventPutObjectAclProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventPutObjectAclProvider) Ptr() *S3EventPutObjectAclProvider {
	return &s
}

type S3EventPutObjectLegalHold struct {
	ObjectKey  string                            `json:"objectKey"`
	Bucket     string                            `json:"bucket"`
	Timestamp  time.Time                         `json:"timestamp"`
	Provider   S3EventPutObjectLegalHoldProvider `json:"provider,omitempty"`
	CustomerId *string                           `json:"customerId,omitempty"`
	FeatureId  *string                           `json:"featureId,omitempty"`
	ClientType *string                           `json:"clientType,omitempty"`
	ClientId   *string                           `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventPutObjectLegalHold) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventPutObjectLegalHold
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventPutObjectLegalHold(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventPutObjectLegalHold) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventPutObjectLegalHoldProvider string

const (
	S3EventPutObjectLegalHoldProviderAws       S3EventPutObjectLegalHoldProvider = "aws"
	S3EventPutObjectLegalHoldProviderBackblaze S3EventPutObjectLegalHoldProvider = "backblaze"
	S3EventPutObjectLegalHoldProviderWasabi    S3EventPutObjectLegalHoldProvider = "wasabi"
)

func NewS3EventPutObjectLegalHoldProviderFromString(s string) (S3EventPutObjectLegalHoldProvider, error) {
	switch s {
	case "aws":
		return S3EventPutObjectLegalHoldProviderAws, nil
	case "backblaze":
		return S3EventPutObjectLegalHoldProviderBackblaze, nil
	case "wasabi":
		return S3EventPutObjectLegalHoldProviderWasabi, nil
	}
	var t S3EventPutObjectLegalHoldProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventPutObjectLegalHoldProvider) Ptr() *S3EventPutObjectLegalHoldProvider {
	return &s
}

type S3EventPutObjectLockConfiguration struct {
	Bucket     string                                    `json:"bucket"`
	Timestamp  time.Time                                 `json:"timestamp"`
	Provider   S3EventPutObjectLockConfigurationProvider `json:"provider,omitempty"`
	CustomerId *string                                   `json:"customerId,omitempty"`
	FeatureId  *string                                   `json:"featureId,omitempty"`
	ClientType *string                                   `json:"clientType,omitempty"`
	ClientId   *string                                   `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventPutObjectLockConfiguration) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventPutObjectLockConfiguration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventPutObjectLockConfiguration(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventPutObjectLockConfiguration) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventPutObjectLockConfigurationProvider string

const (
	S3EventPutObjectLockConfigurationProviderAws       S3EventPutObjectLockConfigurationProvider = "aws"
	S3EventPutObjectLockConfigurationProviderBackblaze S3EventPutObjectLockConfigurationProvider = "backblaze"
	S3EventPutObjectLockConfigurationProviderWasabi    S3EventPutObjectLockConfigurationProvider = "wasabi"
)

func NewS3EventPutObjectLockConfigurationProviderFromString(s string) (S3EventPutObjectLockConfigurationProvider, error) {
	switch s {
	case "aws":
		return S3EventPutObjectLockConfigurationProviderAws, nil
	case "backblaze":
		return S3EventPutObjectLockConfigurationProviderBackblaze, nil
	case "wasabi":
		return S3EventPutObjectLockConfigurationProviderWasabi, nil
	}
	var t S3EventPutObjectLockConfigurationProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventPutObjectLockConfigurationProvider) Ptr() *S3EventPutObjectLockConfigurationProvider {
	return &s
}

type S3EventPutObjectProvider string

const (
	S3EventPutObjectProviderAws       S3EventPutObjectProvider = "aws"
	S3EventPutObjectProviderBackblaze S3EventPutObjectProvider = "backblaze"
	S3EventPutObjectProviderWasabi    S3EventPutObjectProvider = "wasabi"
)

func NewS3EventPutObjectProviderFromString(s string) (S3EventPutObjectProvider, error) {
	switch s {
	case "aws":
		return S3EventPutObjectProviderAws, nil
	case "backblaze":
		return S3EventPutObjectProviderBackblaze, nil
	case "wasabi":
		return S3EventPutObjectProviderWasabi, nil
	}
	var t S3EventPutObjectProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventPutObjectProvider) Ptr() *S3EventPutObjectProvider {
	return &s
}

type S3EventPutObjectRetention struct {
	ObjectKey  string                            `json:"objectKey"`
	Bucket     string                            `json:"bucket"`
	Timestamp  time.Time                         `json:"timestamp"`
	Provider   S3EventPutObjectRetentionProvider `json:"provider,omitempty"`
	CustomerId *string                           `json:"customerId,omitempty"`
	FeatureId  *string                           `json:"featureId,omitempty"`
	ClientType *string                           `json:"clientType,omitempty"`
	ClientId   *string                           `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventPutObjectRetention) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventPutObjectRetention
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventPutObjectRetention(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventPutObjectRetention) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventPutObjectRetentionProvider string

const (
	S3EventPutObjectRetentionProviderAws       S3EventPutObjectRetentionProvider = "aws"
	S3EventPutObjectRetentionProviderBackblaze S3EventPutObjectRetentionProvider = "backblaze"
	S3EventPutObjectRetentionProviderWasabi    S3EventPutObjectRetentionProvider = "wasabi"
)

func NewS3EventPutObjectRetentionProviderFromString(s string) (S3EventPutObjectRetentionProvider, error) {
	switch s {
	case "aws":
		return S3EventPutObjectRetentionProviderAws, nil
	case "backblaze":
		return S3EventPutObjectRetentionProviderBackblaze, nil
	case "wasabi":
		return S3EventPutObjectRetentionProviderWasabi, nil
	}
	var t S3EventPutObjectRetentionProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventPutObjectRetentionProvider) Ptr() *S3EventPutObjectRetentionProvider {
	return &s
}

type S3EventUploadPart struct {
	UploadId   string                    `json:"uploadId"`
	Bytes      int                       `json:"bytes"`
	PartNumber int                       `json:"partNumber"`
	Bucket     string                    `json:"bucket"`
	Timestamp  time.Time                 `json:"timestamp"`
	Provider   S3EventUploadPartProvider `json:"provider,omitempty"`
	CustomerId *string                   `json:"customerId,omitempty"`
	FeatureId  *string                   `json:"featureId,omitempty"`
	ClientType *string                   `json:"clientType,omitempty"`
	ClientId   *string                   `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventUploadPart) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventUploadPart
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventUploadPart(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventUploadPart) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventUploadPartCopy struct {
	UploadId   string                           `json:"uploadId"`
	Bytes      int                              `json:"bytes"`
	PartNumber int                              `json:"partNumber"`
	CopySource *S3EventUploadPartCopyCopySource `json:"copySource,omitempty"`
	Bucket     string                           `json:"bucket"`
	Timestamp  time.Time                        `json:"timestamp"`
	Provider   S3EventUploadPartCopyProvider    `json:"provider,omitempty"`
	CustomerId *string                          `json:"customerId,omitempty"`
	FeatureId  *string                          `json:"featureId,omitempty"`
	ClientType *string                          `json:"clientType,omitempty"`
	ClientId   *string                          `json:"clientId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventUploadPartCopy) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventUploadPartCopy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventUploadPartCopy(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventUploadPartCopy) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventUploadPartCopyCopySource struct {
	Bucket    string  `json:"bucket"`
	ObjectKey string  `json:"objectKey"`
	VersionId *string `json:"versionId,omitempty"`

	_rawJSON json.RawMessage
}

func (s *S3EventUploadPartCopyCopySource) UnmarshalJSON(data []byte) error {
	type unmarshaler S3EventUploadPartCopyCopySource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = S3EventUploadPartCopyCopySource(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *S3EventUploadPartCopyCopySource) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type S3EventUploadPartCopyProvider string

const (
	S3EventUploadPartCopyProviderAws       S3EventUploadPartCopyProvider = "aws"
	S3EventUploadPartCopyProviderBackblaze S3EventUploadPartCopyProvider = "backblaze"
	S3EventUploadPartCopyProviderWasabi    S3EventUploadPartCopyProvider = "wasabi"
)

func NewS3EventUploadPartCopyProviderFromString(s string) (S3EventUploadPartCopyProvider, error) {
	switch s {
	case "aws":
		return S3EventUploadPartCopyProviderAws, nil
	case "backblaze":
		return S3EventUploadPartCopyProviderBackblaze, nil
	case "wasabi":
		return S3EventUploadPartCopyProviderWasabi, nil
	}
	var t S3EventUploadPartCopyProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventUploadPartCopyProvider) Ptr() *S3EventUploadPartCopyProvider {
	return &s
}

type S3EventUploadPartProvider string

const (
	S3EventUploadPartProviderAws       S3EventUploadPartProvider = "aws"
	S3EventUploadPartProviderBackblaze S3EventUploadPartProvider = "backblaze"
	S3EventUploadPartProviderWasabi    S3EventUploadPartProvider = "wasabi"
)

func NewS3EventUploadPartProviderFromString(s string) (S3EventUploadPartProvider, error) {
	switch s {
	case "aws":
		return S3EventUploadPartProviderAws, nil
	case "backblaze":
		return S3EventUploadPartProviderBackblaze, nil
	case "wasabi":
		return S3EventUploadPartProviderWasabi, nil
	}
	var t S3EventUploadPartProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s S3EventUploadPartProvider) Ptr() *S3EventUploadPartProvider {
	return &s
}
